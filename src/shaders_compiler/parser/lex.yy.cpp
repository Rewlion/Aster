#line 1 "src/shaders_compiler/parser/lex.yy.cpp"

#line 3 "src/shaders_compiler/parser/lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer sh_create_buffer
#define yy_delete_buffer sh_delete_buffer
#define yy_scan_buffer sh_scan_buffer
#define yy_scan_string sh_scan_string
#define yy_scan_bytes sh_scan_bytes
#define yy_init_buffer sh_init_buffer
#define yy_flush_buffer sh_flush_buffer
#define yy_load_buffer_state sh_load_buffer_state
#define yy_switch_to_buffer sh_switch_to_buffer
#define yypush_buffer_state shpush_buffer_state
#define yypop_buffer_state shpop_buffer_state
#define yyensure_buffer_stack shensure_buffer_stack
#define yy_flex_debug sh_flex_debug
#define yyin shin
#define yyleng shleng
#define yylex shlex
#define yylineno shlineno
#define yyout shout
#define yyrestart shrestart
#define yytext shtext
#define yywrap shwrap
#define yyalloc shalloc
#define yyrealloc shrealloc
#define yyfree shfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define sh_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer sh_create_buffer
#endif

#ifdef yy_delete_buffer
#define sh_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer sh_delete_buffer
#endif

#ifdef yy_scan_buffer
#define sh_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer sh_scan_buffer
#endif

#ifdef yy_scan_string
#define sh_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string sh_scan_string
#endif

#ifdef yy_scan_bytes
#define sh_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes sh_scan_bytes
#endif

#ifdef yy_init_buffer
#define sh_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer sh_init_buffer
#endif

#ifdef yy_flush_buffer
#define sh_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer sh_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define sh_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state sh_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define sh_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer sh_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define shpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state shpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define shpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state shpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define shensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack shensure_buffer_stack
#endif

#ifdef yylex
#define shlex_ALREADY_DEFINED
#else
#define yylex shlex
#endif

#ifdef yyrestart
#define shrestart_ALREADY_DEFINED
#else
#define yyrestart shrestart
#endif

#ifdef yylex_init
#define shlex_init_ALREADY_DEFINED
#else
#define yylex_init shlex_init
#endif

#ifdef yylex_init_extra
#define shlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra shlex_init_extra
#endif

#ifdef yylex_destroy
#define shlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy shlex_destroy
#endif

#ifdef yyget_debug
#define shget_debug_ALREADY_DEFINED
#else
#define yyget_debug shget_debug
#endif

#ifdef yyset_debug
#define shset_debug_ALREADY_DEFINED
#else
#define yyset_debug shset_debug
#endif

#ifdef yyget_extra
#define shget_extra_ALREADY_DEFINED
#else
#define yyget_extra shget_extra
#endif

#ifdef yyset_extra
#define shset_extra_ALREADY_DEFINED
#else
#define yyset_extra shset_extra
#endif

#ifdef yyget_in
#define shget_in_ALREADY_DEFINED
#else
#define yyget_in shget_in
#endif

#ifdef yyset_in
#define shset_in_ALREADY_DEFINED
#else
#define yyset_in shset_in
#endif

#ifdef yyget_out
#define shget_out_ALREADY_DEFINED
#else
#define yyget_out shget_out
#endif

#ifdef yyset_out
#define shset_out_ALREADY_DEFINED
#else
#define yyset_out shset_out
#endif

#ifdef yyget_leng
#define shget_leng_ALREADY_DEFINED
#else
#define yyget_leng shget_leng
#endif

#ifdef yyget_text
#define shget_text_ALREADY_DEFINED
#else
#define yyget_text shget_text
#endif

#ifdef yyget_lineno
#define shget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno shget_lineno
#endif

#ifdef yyset_lineno
#define shset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno shset_lineno
#endif

#ifdef yywrap
#define shwrap_ALREADY_DEFINED
#else
#define yywrap shwrap
#endif

#ifdef yyalloc
#define shalloc_ALREADY_DEFINED
#else
#define yyalloc shalloc
#endif

#ifdef yyrealloc
#define shrealloc_ALREADY_DEFINED
#else
#define yyrealloc shrealloc
#endif

#ifdef yyfree
#define shfree_ALREADY_DEFINED
#else
#define yyfree shfree
#endif

#ifdef yytext
#define shtext_ALREADY_DEFINED
#else
#define yytext shtext
#endif

#ifdef yyleng
#define shleng_ALREADY_DEFINED
#else
#define yyleng shleng
#endif

#ifdef yyin
#define shin_ALREADY_DEFINED
#else
#define yyin shin
#endif

#ifdef yyout
#define shout_ALREADY_DEFINED
#else
#define yyout shout
#endif

#ifdef yy_flex_debug
#define sh_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug sh_flex_debug
#endif

#ifdef yylineno
#define shlineno_ALREADY_DEFINED
#else
#define yylineno shlineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define shwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 153
#define YY_END_OF_BUFFER 154
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[836] =
    {   0,
        6,    6,    0,    0,  154,  152,    6,    6,  152,   11,
       12,   15,   16,  152,   32,    8,    9,   10,    7,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,   13,   14,    2,    3,    2,    6,
        0,    5,   33,   32,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,   30,  151,  127,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  151,    0,    0,    5,   33,  151,
      151,  115,  151,  151,  121,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,   39,  151,  151,
      151,  151,  151,  119,  118,   90,  151,  151,  151,  128,
      151,   97,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  134,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  126,   31,
      151,    0,    0,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  123,  151,  151,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,   40,   41,   42,  151,   77,   70,  151,  151,  133,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,   62,  151,  151,   29,  151,  151,
       78,    4,    1,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  120,  151,  151,  151,  151,  151,  151,
      151,   60,  151,  151,  151,   71,  151,  151,  151,   28,
       34,  151,  151,  151,  151,   22,  151,  151,  151,  151,
       69,  125,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  151,  151,  151,  151,   17,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,   63,
      151,  151,  151,   76,  151,  151,  151,  151,   23,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,   25,  151,   35,   36,   37,  151,  151,
      151,  151,   82,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  143,  144,  145,  146,  147,
      148,  149,  150,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  135,
      136,  137,  138,  139,  140,  141,  142,  151,  151,  151,

      151,  151,  151,  151,   24,   26,  151,  151,   47,  151,
      151,  151,  151,  151,  151,  151,  151,  151,   64,  151,
       73,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,   65,  151,  151,  151,   68,  151,  151,   79,
       18,  151,   21,  151,  151,  151,   61,  151,   46,  151,
       20,  151,  151,   45,  151,  151,  151,  151,   85,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
       38,  151,  151,  151,  151,  151,  151,  151,   88,  151,
      151,  151,  151,  151,  151,  151,   19,  151,  151,  151,
      151,  151,  116,  151,  151,   43,  151,  151,  151,  151,

      151,  151,  151,  151,  151,   81,  151,  151,  104,  100,
      151,  151,  151,  151,   80,  151,   51,  151,  151,   74,
      151,  151,  151,  151,  151,  151,  151,  151,  102,   98,
      151,  151,   44,  151,  151,  151,  151,  151,  151,   67,
      151,  151,  151,  151,  151,  151,  151,  151,  129,  151,
      151,  151,  151,  151,   52,  151,  151,  151,  130,   59,
       50,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  122,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  132,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  151,  151,  151,  124,  151,  151,
      151,  151,  151,   84,  151,  151,  151,  151,  151,   86,
       83,  151,  151,  151,  151,  151,  151,  151,  151,   48,
      151,  151,  151,  151,  151,  151,   54,  151,  151,  151,
      151,  151,  151,  151,  131,   66,  151,  151,  151,  151,
       72,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  113,  111,   53,  151,   96,  151,   93,  108,
      106,   27,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,   89,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
       75,  151,  151,   87,  151,  151,  151,  151,  151,  151,
      151,  117,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,   49,  151,  110,  151,  151,  151,  151,
      151,  151,  151,  151,  105,  101,  103,   99,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,   95,   92,

      151,  151,  151,  151,  151,  151,   94,   91,  151,  151,
      151,  151,  151,  151,  114,  112,  151,  151,   55,  151,
      109,  107,  151,  151,   56,  151,  151,  151,  151,  151,
      151,   57,  151,   58,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    4,    1,    1,    1,    1,    5,
        6,    1,    1,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   19,   20,   21,    1,
       22,    1,    1,   23,   24,   24,   24,   25,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   26,   24,   24,   24,   24,   24,   24,
        1,    1,    1,    1,   27,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,    1,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[56] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    4,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    1,    1
    } ;

static const flex_int16_t yy_base[841] =
    {   0,
        0,    0,   53,   55,  862,  863,   58,   60,  826,  863,
      863,  863,  863,  850,  850,  863,  863,  863,  863,    0,
      826,   34,   28,   39,   34,   26,   43,  812,  828,  814,
      822,   47,   56,   58,   46,   57,  821,   65,   62,  806,
      806,  808,  817,  816,  863,  863,  863,  863,  815,  102,
      807,    0,    0,  836,    0,  793,  796,  811,   65,  810,
      808,  806,  790,  809,  804,   77,   68,  788,  786,  786,
       33,  790,  799,  784,   76,  797,  782,  786,  792,  774,
      783,  776,  781,  772,   82,  788,  792,   75,  782,  781,
      789,   97,  775,  772,  766,  782,  779,   99,  102,   88,

      783,  773,  763,  761,  761,  764,  758,    0,    0,  756,
      766,    0,  766,  772,  772,  757,  764,  763,  754,  766,
      751,  749,  745,  738,  762,  741,  757,  759,   60,  753,
      745,  737,  754,  753,  753,  752,  730,  120,  745,  733,
      729,  742,  737,    0,    0,    0,  741,  739,  728,    0,
      742,  741,  105,  721,  736,  724,  724,  746,  735,  725,
      729,  720,  726,  725,  713,  712,    0,  727,  712,  705,
      708,  715,  702,  701,  719,  714,  728,  697,    0,    0,
      701,  711,  702,  692,  690,  710,  685,  109,  705,  703,
      701,  692,  687,  686,  111,  683,  702,  121,  693,  682,

      127,  687,  676,  679,  696,  690,  674,  673,  690,  128,
      671,    0,    0,    0,  672,    0,  689,  688,  684,    0,
      668,  669,  679,  670,  668,  676,  680,  671,  658,  668,
      676,  653,  655,  668,  671,  653,  652,  657,  663,  131,
      664,  648,  650,  650,    0,  642,  648,    0,  661,  655,
        0,  863,  863,  641,  657,  657,  637,  641,  649,  133,
      635,  647,  646,    0,  650,  631,  636,  646,  637,  631,
      632,  643,  633,  629,  625,    0,  638,  624,  622,    0,
      149,  631,  623,  620,  621,    0,  612,  616,   98,  630,
        0,    0,  612,  619,  605,  604,  610,  624,  623,  602,

      163,  620,  600,  601,  615,  595,  597,  610,    0,  602,
      598,  598,  602,  609,  591,  599,  589,  599,  171,    0,
      600,  584,  601,    0,  580,  579,  597,  585,    0,  580,
      585,  594,  590,  589,  579,  578,  587,  589,  583,  572,
      571,  574,  573,    0,  568,    0,    0,  559,  564,  576,
      576,  578,    0,  560,  568,  556,  560,  553,  559,  567,
      566,  554,  557,  556,  558,    0,    0,    0,    0,    0,
        0,    0,    0,  554,  560,  564,  558,  557,  556,  542,
      543,  546,  552,  544,  552,  534,  536,  547,  539,    0,
        0,    0,    0,    0,    0,    0,    0,  564,  544,  536,

      542,  541,  530,  537,    0,    0,  531,  542,    0,  521,
      518,  539,  525,  536,  516,  527,  519,  528,    0,  544,
      531,  516,  529,  515,  527,  507,  507,  508,  522,  501,
      503,  502,    0,  510,  509,  495,    0,  498,  496,    0,
        0,  514,    0,  505,  497,  511,    0,  490,    0,  488,
        0,  503,  509,    0,  501,  487,  486,  489,    0,  497,
      486,  500,  494,  475,  481,  487,  480,  493,  475,  478,
        0,  476,  486,  466,  472,  482,  466,  476,  484,  471,
      463,  461,  461,  460,  459,  472,    0,  456,  456,  473,
      455,  137,    0,  467,  471,    0,  456,  449,  449,  448,

      452,  449,  138,  446,  445,    0,  450,  443,  460,  459,
      438,  439,  447,  437,    0,  437,  453,  436,  446,    0,
      450,  444,  443,  427,  426,  445,  443,  422,  442,  441,
      428,  424,    0,  157,  434,  432,  431,  415,  430,    0,
      421,  417,  411,  429,  429,  428,  425,  424,    0,  425,
      410,  422,  401,  398,  420,  405,  161,  414,    0,    0,
        0,  397,  396,  413,  164,  412,  397,  400,  410,  401,
      389,  408,  403,    0,  405,  405,  388,  391,  397,  385,
      385,  380,  386,  385,  391,  388,  378,  392,  383,  368,
      389,  374,  369,  369,    0,  371,  380,  364,  371,  381,

      369,  372,  364,  364,  358,  358,  360,    0,  360,  358,
      364,  356,  366,    0,  353,  363,  362,  361,  348,    0,
        0,  352,  343,  353,  359,  346,  339,  355,  341,    0,
      338,  350,  334,  348,  351,  333,    0,  330,  340,  332,
      327,  330,  344,  326,    0,    0,  323,  328,  327,  319,
        0,  331,  318,  325,   80,  125,  143,  129,  144,  153,
      147,  156,    0,    0,  171,  156,    0,  154,    0,    0,
        0,    0,  170,  171,  176,  178,  171,  176,  162,  183,
      184,  176,  186,  186,  173,  188,  170,  194,    0,  195,
      196,  185,  197,  200,  197,  201,  191,  189,  193,  191,

      193,  193,  189,  210,  210,  212,  204,  191,  209,  210,
        0,  213,  217,    0,  205,  204,  209,  206,  211,  219,
      218,    0,  220,  207,  222,  209,  221,  230,  231,  223,
      230,  215,  228,  222,  230,  224,  240,  216,  241,  238,
      243,  237,  226,  244,  245,  248,  240,  251,  251,  235,
      253,  237,  255,    0,  254,    0,  256,  260,  253,  242,
      243,  261,  264,  265,    0,    0,    0,    0,  255,  254,
      250,  251,  271,  273,  259,  260,  271,  274,  266,  264,
      264,  269,  267,  268,  280,  284,  268,  269,  274,  284,
      274,  279,  284,  278,  276,  277,  286,  293,    0,    0,

      295,  285,  292,  286,  301,  285,    0,    0,  303,  295,
      281,  304,  307,  291,    0,    0,  307,  310,    0,  287,
        0,    0,  308,  311,    0,  301,  311,  314,  304,  294,
      317,    0,  296,    0,  863,  348,  350,  353,  358,  355
    } ;

static const flex_int16_t yy_def[841] =
    {   0,
      835,    1,  836,  836,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  837,  835,  835,  835,  835,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  835,  835,  835,  835,  835,  835,
      835,  839,  840,  837,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,

      838,  838,  838,  838,  838,  835,  835,  839,  840,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  835,  835,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,

      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  835,  835,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,

      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,

      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,

      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,

      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,

      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,

      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,    0,  835,  835,  835,  835,  835
    } ;

static const flex_int16_t yy_nxt[919] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,    6,   14,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   16,
       17,   18,   19,   20,   20,   21,   20,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   20,   31,   32,   33,
       34,   35,   36,   20,   37,   38,   39,   20,   40,   41,
       42,   43,   44,   45,   46,   48,   49,   48,   49,   50,
       50,   50,   50,   57,   58,   67,   61,   63,  131,   69,
       71,  132,   59,   64,   60,   62,   70,   65,   77,   68,
       66,   72,   78,   80,   88,   83,   86,  202,   79,   84,
       87,   81,   93,   99,   94,  203,   95,  125,   89,   85,

       82,   90,   91,   50,   50,  136,  100,  113,  149,   96,
      126,   97,   98,  127,  114,  121,  122,  123,  137,  124,
      154,  155,  138,  175,  139,  679,  150,  170,  151,  159,
      160,  172,  212,  213,  214,  176,  355,  161,  266,  162,
      225,  171,  163,  356,  258,  164,  267,  173,  270,  226,
      271,  680,  174,  259,  274,  284,  275,  285,  310,  327,
      311,  346,  347,  348,  531,  541,  532,  542,  328,  681,
      682,  683,  312,  366,  367,  368,  369,  370,  371,  372,
      373,  390,  391,  392,  393,  394,  395,  396,  397,  569,
      592,  593,  599,  684,  685,  570,  686,  687,  688,  689,

      690,  691,  571,  692,  693,  694,  594,  695,  696,  600,
      697,  699,  698,  700,  702,  703,  704,  705,  706,  707,
      708,  709,  710,  711,  712,  701,  713,  714,  715,  716,
      717,  718,  719,  720,  721,  722,  723,  724,  725,  726,
      727,  728,  729,  730,  731,  732,  733,  734,  735,  736,
      737,  738,  739,  740,  741,  742,  743,  744,  745,  746,
      747,  748,  749,  750,  751,  752,  753,  754,  755,  756,
      757,  758,  759,  760,  761,  762,  763,  764,  765,  766,
      767,  768,  769,  771,  770,  772,  773,  774,  775,  776,
      777,  778,  779,  781,  780,  782,  783,  784,  785,  786,

      787,  788,  789,  790,  791,  792,  793,  794,  795,  796,
      797,  798,  799,  800,  801,  802,  803,  804,  805,  806,
      807,  808,  809,  810,  811,  812,  813,  814,  815,  816,
      817,  818,  819,  820,  821,  822,  823,  824,  825,  826,
      827,  828,  829,  830,  831,  832,  833,  834,   47,   47,
       47,   47,   47,   54,   54,   55,   55,   55,  108,  109,
      108,  108,  108,  678,  677,  676,  675,  674,  673,  672,
      671,  670,  669,  668,  667,  666,  665,  664,  663,  662,
      661,  660,  659,  658,  657,  656,  655,  654,  653,  652,
      651,  650,  649,  648,  647,  646,  645,  644,  643,  642,

      641,  640,  639,  638,  637,  636,  635,  634,  633,  632,
      631,  630,  629,  628,  627,  626,  625,  624,  623,  622,
      621,  620,  619,  618,  617,  616,  615,  614,  613,  612,
      611,  610,  609,  608,  607,  606,  605,  604,  603,  602,
      601,  598,  597,  596,  595,  591,  590,  589,  588,  587,
      586,  585,  584,  583,  582,  581,  580,  579,  578,  577,
      576,  575,  574,  573,  572,  568,  567,  566,  565,  564,
      563,  562,  561,  560,  559,  558,  557,  556,  555,  554,
      553,  552,  551,  550,  549,  548,  547,  546,  545,  544,
      543,  540,  539,  538,  537,  536,  535,  534,  533,  530,

      529,  528,  527,  526,  525,  524,  523,  522,  521,  520,
      519,  518,  517,  516,  515,  514,  513,  512,  511,  510,
      509,  508,  507,  506,  505,  504,  503,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  480,
      479,  478,  477,  476,  475,  474,  473,  472,  471,  470,
      469,  468,  467,  466,  465,  464,  463,  462,  461,  460,
      459,  458,  457,  456,  455,  454,  453,  452,  451,  450,
      449,  448,  447,  446,  445,  444,  443,  442,  441,  440,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,

      429,  428,  427,  426,  425,  424,  423,  422,  421,  420,
      419,  418,  417,  416,  415,  414,  413,  412,  411,  410,
      409,  408,  407,  406,  405,  404,  403,  402,  401,  400,
      399,  398,  389,  388,  387,  386,  385,  384,  383,  382,
      381,  380,  379,  378,  377,  376,  375,  374,  365,  364,
      363,  362,  361,  360,  359,  358,  357,  354,  353,  352,
      351,  350,  349,  345,  344,  343,  342,  341,  340,  339,
      338,  337,  336,  335,  334,  333,  332,  331,  330,  329,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,
      316,  315,  314,  313,  309,  308,  307,  306,  305,  304,

      303,  302,  301,  300,  299,  298,  297,  296,  295,  294,
      293,  292,  291,  290,  289,  288,  287,  286,  283,  282,
      281,  280,  279,  278,  277,  276,  273,  272,  269,  268,
      265,  264,  263,  262,  261,  260,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  245,  244,
      243,  242,  241,  240,  239,  238,  237,  236,  235,  234,
      233,  232,  231,  230,  229,  228,  227,  224,  223,  222,
      221,  220,  219,  218,  217,  216,  215,  211,  210,  209,
      208,  207,  206,  205,  204,  201,  200,  199,  198,  197,
      196,  195,  194,  193,  192,  191,  190,  189,  188,  187,

      186,  185,  184,  183,  182,  181,  180,  179,  178,  177,
      169,  168,  167,  166,  165,  158,  157,  156,  153,  152,
      148,  147,  146,  145,  144,  143,  142,  141,  140,  135,
      134,  133,  130,  129,  128,  120,  119,  118,  117,  116,
      115,  112,  111,  110,   53,  107,  106,  105,  104,  103,
      102,  101,   92,   76,   75,   74,   73,   56,   53,   52,
       51,  835,    5,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,

      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835
    } ;

static const flex_int16_t yy_chk[919] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    4,    4,    7,
        7,    8,    8,   22,   22,   25,   23,   24,   71,   26,
       27,   71,   22,   24,   22,   23,   26,   24,   32,   25,
       24,   27,   32,   33,   36,   34,   35,  129,   32,   34,
       35,   33,   38,   39,   38,  129,   38,   67,   36,   34,

       33,   36,   36,   50,   50,   75,   39,   59,   85,   38,
       67,   38,   38,   67,   59,   66,   66,   66,   75,   66,
       88,   88,   75,  100,   75,  655,   85,   98,   85,   92,
       92,   99,  138,  138,  138,  100,  289,   92,  195,   92,
      153,   98,   92,  289,  188,   92,  195,   99,  198,  153,
      198,  656,   99,  188,  201,  210,  201,  210,  240,  260,
      240,  281,  281,  281,  492,  503,  492,  503,  260,  657,
      658,  659,  240,  301,  301,  301,  301,  301,  301,  301,
      301,  319,  319,  319,  319,  319,  319,  319,  319,  534,
      557,  557,  565,  660,  661,  534,  662,  665,  666,  668,

      673,  674,  534,  675,  676,  677,  557,  678,  679,  565,
      680,  681,  680,  681,  682,  683,  684,  685,  686,  687,
      688,  690,  691,  692,  693,  681,  694,  695,  696,  697,
      698,  699,  700,  701,  702,  703,  704,  705,  706,  707,
      708,  709,  710,  712,  713,  715,  716,  717,  718,  719,
      720,  721,  723,  724,  725,  726,  727,  728,  729,  730,
      731,  732,  733,  734,  735,  736,  737,  738,  739,  740,
      741,  742,  743,  744,  745,  746,  747,  748,  749,  750,
      751,  752,  753,  755,  753,  757,  758,  759,  760,  761,
      762,  763,  764,  769,  764,  770,  771,  772,  773,  774,

      775,  776,  777,  778,  779,  780,  781,  782,  783,  784,
      785,  786,  787,  788,  789,  790,  791,  792,  793,  794,
      795,  796,  797,  798,  801,  802,  803,  804,  805,  806,
      809,  810,  811,  812,  813,  814,  817,  818,  820,  823,
      824,  826,  827,  828,  829,  830,  831,  833,  836,  836,
      836,  836,  836,  837,  837,  838,  838,  838,  839,  840,
      839,  839,  839,  654,  653,  652,  650,  649,  648,  647,
      644,  643,  642,  641,  640,  639,  638,  636,  635,  634,
      633,  632,  631,  629,  628,  627,  626,  625,  624,  623,
      622,  619,  618,  617,  616,  615,  613,  612,  611,  610,

      609,  607,  606,  605,  604,  603,  602,  601,  600,  599,
      598,  597,  596,  594,  593,  592,  591,  590,  589,  588,
      587,  586,  585,  584,  583,  582,  581,  580,  579,  578,
      577,  576,  575,  573,  572,  571,  570,  569,  568,  567,
      566,  564,  563,  562,  558,  556,  555,  554,  553,  552,
      551,  550,  548,  547,  546,  545,  544,  543,  542,  541,
      539,  538,  537,  536,  535,  532,  531,  530,  529,  528,
      527,  526,  525,  524,  523,  522,  521,  519,  518,  517,
      516,  514,  513,  512,  511,  510,  509,  508,  507,  505,
      504,  502,  501,  500,  499,  498,  497,  495,  494,  491,

      490,  489,  488,  486,  485,  484,  483,  482,  481,  480,
      479,  478,  477,  476,  475,  474,  473,  472,  470,  469,
      468,  467,  466,  465,  464,  463,  462,  461,  460,  458,
      457,  456,  455,  453,  452,  450,  448,  446,  445,  444,
      442,  439,  438,  436,  435,  434,  432,  431,  430,  429,
      428,  427,  426,  425,  424,  423,  422,  421,  420,  418,
      417,  416,  415,  414,  413,  412,  411,  410,  408,  407,
      404,  403,  402,  401,  400,  399,  398,  389,  388,  387,
      386,  385,  384,  383,  382,  381,  380,  379,  378,  377,
      376,  375,  374,  365,  364,  363,  362,  361,  360,  359,

      358,  357,  356,  355,  354,  352,  351,  350,  349,  348,
      345,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  328,  327,  326,  325,  323,
      322,  321,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  308,  307,  306,  305,  304,  303,  302,  300,  299,
      298,  297,  296,  295,  294,  293,  290,  288,  287,  285,
      284,  283,  282,  279,  278,  277,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  266,  265,  263,  262,  261,
      259,  258,  257,  256,  255,  254,  250,  249,  247,  246,
      244,  243,  242,  241,  239,  238,  237,  236,  235,  234,

      233,  232,  231,  230,  229,  228,  227,  226,  225,  224,
      223,  222,  221,  219,  218,  217,  215,  211,  209,  208,
      207,  206,  205,  204,  203,  202,  200,  199,  197,  196,
      194,  193,  192,  191,  190,  189,  187,  186,  185,  184,
      183,  182,  181,  178,  177,  176,  175,  174,  173,  172,
      171,  170,  169,  168,  166,  165,  164,  163,  162,  161,
      160,  159,  158,  157,  156,  155,  154,  152,  151,  149,
      148,  147,  143,  142,  141,  140,  139,  137,  136,  135,
      134,  133,  132,  131,  130,  128,  127,  126,  125,  124,
      123,  122,  121,  120,  119,  118,  117,  116,  115,  114,

      113,  111,  110,  107,  106,  105,  104,  103,  102,  101,
       97,   96,   95,   94,   93,   91,   90,   89,   87,   86,
       84,   83,   82,   81,   80,   79,   78,   77,   76,   74,
       73,   72,   70,   69,   68,   65,   64,   63,   62,   61,
       60,   58,   57,   56,   54,   51,   49,   44,   43,   42,
       41,   40,   37,   31,   30,   29,   28,   21,   15,   14,
        9,    5,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,

      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[154] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "src/shaders_compiler/parser/parser.l"
#line 2 "src/shaders_compiler/parser/parser.l"
    #define YY_DECL int shlex(ShadersSystem::Compiler& compiler)

    #include <stdio.h>
    #include "parser.tab.hpp"

    void sherror(ShadersSystem::Compiler& compiler, const char* msg);
    extern int shlex(ShadersSystem::Compiler& compiler);

    string codeBuf;
#line 1222 "src/shaders_compiler/parser/lex.yy.cpp"
#define YY_NO_UNISTD_H 1

#line 1225 "src/shaders_compiler/parser/lex.yy.cpp"

#define INITIAL 0
#define hlsl 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 21 "src/shaders_compiler/parser/parser.l"


#line 1446 "src/shaders_compiler/parser/lex.yy.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 836 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 835 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 23 "src/shaders_compiler/parser/parser.l"
{
  codeBuf = "";
  BEGIN(hlsl);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 28 "src/shaders_compiler/parser/parser.l"
{
  codeBuf += *yytext;
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 32 "src/shaders_compiler/parser/parser.l"
{
  codeBuf += "\n";
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 36 "src/shaders_compiler/parser/parser.l"
{
  BEGIN(INITIAL);
  shlval.sval = strdup(codeBuf.c_str());
  return TFX_TOKEN_HLSL_CODE;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hlsl):
#line 42 "src/shaders_compiler/parser/parser.l"
{
  fclose(yyin);
  yypop_buffer_state();
  if ( !YY_CURRENT_BUFFER )
  {
    yyterminate();
  }
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 51 "src/shaders_compiler/parser/parser.l"
; // comment
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 53 "src/shaders_compiler/parser/parser.l"
;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 55 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_AT;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 59 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_COLON;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SEMICOLON;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 67 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_EQUAL_OP;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_LEFT_PARENTHESIS;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 75 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_RIGHT_PARENTHESIS;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 79 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_LEFT_BRACKET;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 83 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_RIGHT_BRACKET;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 87 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_COMMA;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 91 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_MINUS;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 95 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SCOPE;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 99 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_RESERVE;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 103 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_REGISTER;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 107 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TEXTURE;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 111 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SAMPLER;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 115 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_INPUT;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 119 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_BUFFER;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 123 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_CBUFFER;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 127 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_EXTERN;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 131 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_CHANNEL;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 135 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DESCRIPTOR_SET;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 139 "src/shaders_compiler/parser/parser.l"
{
  shlval.bval = false;
  return TFX_TOKEN_BOOL_VAL;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 144 "src/shaders_compiler/parser/parser.l"
{
  shlval.bval = true;
  return TFX_TOKEN_BOOL_VAL;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 149 "src/shaders_compiler/parser/parser.l"
{
  shlval.bval = false;
  return TFX_TOKEN_BOOL_VAL;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 154 "src/shaders_compiler/parser/parser.l"
{
  shlval.bval = true;
  return TFX_TOKEN_BOOL_VAL;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 159 "src/shaders_compiler/parser/parser.l"
{
  shlval.ival = atoi(yytext);
  return TFX_TOKEN_INT_VAL;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 164 "src/shaders_compiler/parser/parser.l"
{ 
  shlval.fval = atof(yytext);
  return TFX_TOKEN_FLOAT_VAL;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 169 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_FLOAT;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 173 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_FLOAT2;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 177 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_FLOAT3;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 181 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_FLOAT4;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 185 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_FLOAT4X4;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 189 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_INT;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 193 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_INT2;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 197 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_INT3;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 201 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_INT4;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 205 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TEXTURE2D;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 209 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TECHNIQUE;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 213 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ACTIVATE;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 217 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SUPPORT;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 221 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_COMPILE;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 225 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_RENDER_STATE;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 229 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PRIMITIVE_TOPOLOGY;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 233 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_POINT_LIST;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 237 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_LINE_LIST;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 241 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_LINE_STRIP;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 245 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_TRIANGLE_LIST;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 249 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_TRIANGLE_FAN;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 253 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_LINE_LIST_WITH_ADJACENCY;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 257 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_LINE_STRIP_WITH_ADJACENCY;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 261 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_TRIANGLE_LIST_WITH_ADJACENCY;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 265 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_TRIANGLE_STRIP_WITH_ADJACENCY;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 269 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_PATCH_LIST;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 273 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DEPTH;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 277 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_STENCIL;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 281 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TEST;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 285 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_WRITE;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 289 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_FAIL_OP;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 293 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PASS_OP;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 297 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DEPTH_FAIL_OP;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 301 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_COMPARE_OP;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 305 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_REFERENCE_VALUE;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 309 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_NEVER;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 313 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_LESS;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 317 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_EQUAL;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 321 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_LESS_OR_EQUAL;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 325 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_GREATER;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 329 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_NOT_EQUAL;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 333 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_GREATER_OR_EQUAL;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 337 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ALWAYS;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 341 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_KEEP;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 345 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ZERO;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 349 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_REPLACE;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 353 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_INCREMENT_AND_CLAMP;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 357 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DECREMENT_AND_CLAMP;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 361 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_INVERT;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 365 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_INCREMENT_AND_WRAP;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 369 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DECREMENT_AND_WRAP;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 373 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_BLENDING;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 377 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_HAS_BLANDING;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 381 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_LOGIC_OP_ENABLED;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 385 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_LOGIC_OP;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 389 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_BLEND_CONSTANTS;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 393 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_MRT;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 397 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SRC_COLOR_BLEND_FACTOR;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 401 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DST_COLOR_BLEND_FACTOR;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 405 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_COLOR_BLEND_OP;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 409 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SRC_ALPHA_BLEND_FACTOR;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 413 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DST_ALPHA_BLEND_FACTOR;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 417 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ALPHA_BLEND_OP;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 421 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 425 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SRC_COLOR;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 429 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE_MINUS_SRC_COLOR;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 433 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DST_COLOR;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 437 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE_MINUS_DST_COLOR;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 441 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SRC_ALPHA;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 445 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE_MINUS_SRC_ALPHA;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 449 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DST_ALPHA;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 453 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE_MINUS_DST_ALPHA;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 457 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_CONSTANT_COLOR;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 461 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE_MINUS_CONSTANT_COLOR;
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 465 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_CONSTANT_ALPHA;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 469 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE_MINUS_CONSTANT_ALPHA;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 473 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SRC_ALPHA_SATURATE;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 477 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SRC_ONE_COLOR;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 481 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE_MINUS_SRC_ONE_COLOR;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 485 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SRC_ONE_ALPHA;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 489 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE_MINUS_SRC_ONE_ALPHA;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 493 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ADD;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 497 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SUBTRACT;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 501 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_REVERSE_SUBTRACT;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 505 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_MIN;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 509 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_MAX;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 513 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_CLEAR;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 517 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_AND;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 521 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_AND_REVERSE;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 525 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_COPY;
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 529 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_AND_INVERTED;
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 533 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_NO_OP;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 537 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_XOR;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 541 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_OR;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 545 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_NOR;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 549 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_EQUIVALENT;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 553 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_OR_REVERSE;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 557 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_COPY_INVERTED;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 561 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_OR_INVERTED;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 565 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_NAND;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 569 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SET;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 574 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_VS_6_0;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 578 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_VS_6_1;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 582 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_VS_6_2;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 586 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_VS_6_3;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 590 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_VS_6_4;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 594 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_VS_6_5;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 598 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_VS_6_6;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 602 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_VS_6_7;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 606 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_PS_6_0;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 610 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_PS_6_1;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 614 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_PS_6_2;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 618 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_PS_6_3;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 622 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_PS_6_4;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 626 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_PS_6_5;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 630 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_PS_6_6;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 634 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_PS_6_7;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 638 "src/shaders_compiler/parser/parser.l"
{
  shlval.sval = strdup(yytext);
  return TFX_TOKEN_NAME_VAL;
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 643 "src/shaders_compiler/parser/parser.l"
{ printf("Syntax error in line %d, `%s`\n", yylineno, yytext); exit(1); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 645 "src/shaders_compiler/parser/parser.l"
ECHO;
	YY_BREAK
#line 2596 "src/shaders_compiler/parser/lex.yy.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 836 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 836 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 835);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 645 "src/shaders_compiler/parser/parser.l"


