#line 1 "src/shaders_compiler/parser/lex.yy.cpp"

#line 3 "src/shaders_compiler/parser/lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer sh_create_buffer
#define yy_delete_buffer sh_delete_buffer
#define yy_scan_buffer sh_scan_buffer
#define yy_scan_string sh_scan_string
#define yy_scan_bytes sh_scan_bytes
#define yy_init_buffer sh_init_buffer
#define yy_flush_buffer sh_flush_buffer
#define yy_load_buffer_state sh_load_buffer_state
#define yy_switch_to_buffer sh_switch_to_buffer
#define yypush_buffer_state shpush_buffer_state
#define yypop_buffer_state shpop_buffer_state
#define yyensure_buffer_stack shensure_buffer_stack
#define yy_flex_debug sh_flex_debug
#define yyin shin
#define yyleng shleng
#define yylex shlex
#define yylineno shlineno
#define yyout shout
#define yyrestart shrestart
#define yytext shtext
#define yywrap shwrap
#define yyalloc shalloc
#define yyrealloc shrealloc
#define yyfree shfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define sh_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer sh_create_buffer
#endif

#ifdef yy_delete_buffer
#define sh_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer sh_delete_buffer
#endif

#ifdef yy_scan_buffer
#define sh_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer sh_scan_buffer
#endif

#ifdef yy_scan_string
#define sh_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string sh_scan_string
#endif

#ifdef yy_scan_bytes
#define sh_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes sh_scan_bytes
#endif

#ifdef yy_init_buffer
#define sh_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer sh_init_buffer
#endif

#ifdef yy_flush_buffer
#define sh_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer sh_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define sh_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state sh_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define sh_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer sh_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define shpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state shpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define shpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state shpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define shensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack shensure_buffer_stack
#endif

#ifdef yylex
#define shlex_ALREADY_DEFINED
#else
#define yylex shlex
#endif

#ifdef yyrestart
#define shrestart_ALREADY_DEFINED
#else
#define yyrestart shrestart
#endif

#ifdef yylex_init
#define shlex_init_ALREADY_DEFINED
#else
#define yylex_init shlex_init
#endif

#ifdef yylex_init_extra
#define shlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra shlex_init_extra
#endif

#ifdef yylex_destroy
#define shlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy shlex_destroy
#endif

#ifdef yyget_debug
#define shget_debug_ALREADY_DEFINED
#else
#define yyget_debug shget_debug
#endif

#ifdef yyset_debug
#define shset_debug_ALREADY_DEFINED
#else
#define yyset_debug shset_debug
#endif

#ifdef yyget_extra
#define shget_extra_ALREADY_DEFINED
#else
#define yyget_extra shget_extra
#endif

#ifdef yyset_extra
#define shset_extra_ALREADY_DEFINED
#else
#define yyset_extra shset_extra
#endif

#ifdef yyget_in
#define shget_in_ALREADY_DEFINED
#else
#define yyget_in shget_in
#endif

#ifdef yyset_in
#define shset_in_ALREADY_DEFINED
#else
#define yyset_in shset_in
#endif

#ifdef yyget_out
#define shget_out_ALREADY_DEFINED
#else
#define yyget_out shget_out
#endif

#ifdef yyset_out
#define shset_out_ALREADY_DEFINED
#else
#define yyset_out shset_out
#endif

#ifdef yyget_leng
#define shget_leng_ALREADY_DEFINED
#else
#define yyget_leng shget_leng
#endif

#ifdef yyget_text
#define shget_text_ALREADY_DEFINED
#else
#define yyget_text shget_text
#endif

#ifdef yyget_lineno
#define shget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno shget_lineno
#endif

#ifdef yyset_lineno
#define shset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno shset_lineno
#endif

#ifdef yywrap
#define shwrap_ALREADY_DEFINED
#else
#define yywrap shwrap
#endif

#ifdef yyalloc
#define shalloc_ALREADY_DEFINED
#else
#define yyalloc shalloc
#endif

#ifdef yyrealloc
#define shrealloc_ALREADY_DEFINED
#else
#define yyrealloc shrealloc
#endif

#ifdef yyfree
#define shfree_ALREADY_DEFINED
#else
#define yyfree shfree
#endif

#ifdef yytext
#define shtext_ALREADY_DEFINED
#else
#define yytext shtext
#endif

#ifdef yyleng
#define shleng_ALREADY_DEFINED
#else
#define yyleng shleng
#endif

#ifdef yyin
#define shin_ALREADY_DEFINED
#else
#define yyin shin
#endif

#ifdef yyout
#define shout_ALREADY_DEFINED
#else
#define yyout shout
#endif

#ifdef yy_flex_debug
#define sh_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug sh_flex_debug
#endif

#ifdef yylineno
#define shlineno_ALREADY_DEFINED
#else
#define yylineno shlineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define shwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 178
#define YY_END_OF_BUFFER 179
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[907] =
    {   0,
       10,   10,    0,    0,    5,    5,  179,  177,   10,   11,
      177,   16,   17,   22,   23,  177,   39,   13,   14,   20,
       15,   21,   12,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,   18,
       19,    2,    3,    2,    7,    5,  178,    7,   10,    0,
        0,    9,   40,   39,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
       64,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,   37,

      176,  144,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
        0,    5,    0,    0,    0,    9,   40,  176,  176,  176,
      132,  176,  176,  138,  176,  176,  176,   63,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,   47,
      176,  176,  176,  176,  176,  136,  135,  107,  176,  176,
      176,  176,  145,  176,  114,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  151,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,

      176,  143,   38,  176,    0,    6,    0,    0,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  140,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,   48,
       49,   50,  176,   94,   87,  176,  176,  150,  176,  176,
       62,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,   79,  176,  176,   36,  176,  176,   95,
        0,    1,    0,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  137,  176,  176,  176,  176,  176,

      176,  176,  176,  176,   77,  176,  176,  176,   88,  176,
      176,  176,   35,   41,  176,  176,  176,  176,   29,  176,
      176,  176,  176,   86,  142,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,   24,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,   80,    4,    0,  176,  176,  176,  176,   93,
      176,  176,  176,  176,   30,  176,  176,  176,  176,  176,
      176,  176,  168,  169,  170,  171,  172,  173,  174,  175,
      176,  176,  176,  176,  176,  176,  176,  176,   32,  176,
       42,   43,   44,  176,  176,  176,  176,   99,  176,  176,

      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      160,  161,  162,  163,  164,  165,  166,  167,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  152,  153,  154,  155,  156,  157,
      158,  159,    0,  176,  176,  176,  176,  176,  176,  176,
      176,   31,   33,  176,  176,   59,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,   81,  176,  176,   90,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,   82,  176,  176,  176,   85,  176,  176,   96,   25,
      176,   28,  176,  176,  176,   78,  176,   58,  176,   27,

      176,    0,  176,  176,  176,  176,   57,  176,  176,  176,
      176,  102,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,   46,  176,  176,  176,  176,
      176,  176,  176,  105,  176,  176,  176,  176,  176,  176,
      176,   26,  176,  176,  176,  176,  176,  133,  176,  176,
        8,  176,   51,   52,  176,  176,  176,  176,  176,  176,
      176,  176,  176,   61,  176,   98,  176,  176,  121,  117,
      176,   45,  176,  176,  176,   97,  176,   67,  176,  176,
       91,  176,  176,  176,  176,  176,  176,  176,  176,  119,
      115,  176,  176,   55,  176,  176,  176,  176,  176,  176,

      176,  176,   84,  176,  176,  176,  176,  176,  176,  176,
      176,  146,  176,  176,  176,  176,  176,   68,  176,  176,
      176,  147,   76,   66,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,   54,   53,  176,  176,  139,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      149,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  141,  176,  176,  176,  176,  176,
      101,  176,  176,  176,  176,  176,  103,  100,  176,  176,
      176,  176,  176,  176,  176,  176,   60,  176,  176,  176,

      176,  176,  176,  176,   70,  176,  176,  176,  176,  176,
      176,  176,  148,   83,  176,  176,  176,  176,   89,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      130,  128,  176,   69,  176,  113,  176,  110,  125,  123,
       34,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,   71,  106,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,   56,  176,  176,  176,
      176,   92,  176,  176,  104,  176,  176,  176,  176,  176,
      176,  176,  134,  176,  176,  176,  176,  176,  176,  176,

      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,   65,  176,  127,  176,  176,  176,
      176,  176,  176,  176,  176,  122,  118,  120,  116,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  112,
      109,  176,  176,  176,  176,  176,  176,  111,  108,  176,
      176,  176,  176,  176,  176,  131,  129,  176,  176,   72,
      176,  126,  124,  176,  176,   73,  176,  176,  176,  176,

      176,  176,   74,  176,   75,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    1,    1,    1,    8,
        9,    1,    1,   10,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,    1,   29,   30,   30,   31,   32,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   33,   30,   34,   30,   30,   35,   30,   30,   30,
        1,    1,    1,    1,   36,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,    1,   64,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[65] =
    {   0,
        1,    2,    3,    2,    2,    1,    1,    1,    1,    1,
        4,    5,    1,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    1,    1,    1,    1,    1,    1,    7,
        7,    7,    7,    7,    7,    4,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    1,    1
    } ;

static const flex_int16_t yy_base[915] =
    {   0,
        0,    0,   62,   63,   69,   74,  964,  965,   76,  965,
       23,  965,  965,  965,  965,  950,  950,  965,  965,  965,
      965,  965,  965,    0,  926,  919,   43,   37,   48,   43,
       35,   52,  905,  921,  907,  915,   61,   64,   73,   54,
       74,  914,   76,   80,  899,  899,  901,  910,  909,  965,
      965,  965,  965,  908,  965,  114,  965,    0,  118,  900,
      897,    0,    0,  934,    0,  911,  884,  887,  902,   38,
      901,  899,  897,  881,  878,  899,  894,   87,  898,  885,
        0,   88,  876,  874,  874,   93,  878,  887,  872,   92,
      885,  870,  874,  880,  862,  871,  864,  869,  860,  106,

      876,  880,   90,  870,  869,  877,  109,  863,  860,  854,
      870,  867,  111,  114,  109,  871,  861,  851,  849,  849,
      852,  153,  895,  845,  860,    0,    0,  857,  841,  851,
        0,  851,  857,  857,  842,  849,  848,    0,  839,  851,
      836,  834,  830,  823,  863,  834,  845,  824,  840,  842,
      120,  836,  828,  820,  837,  836,  836,  835,  813,  154,
      828,  816,  812,  825,  820,    0,    0,    0,  824,  822,
      811,  820,    0,  824,  823,  123,  803,  818,  806,  806,
      834,  817,  807,  811,  802,  808,  807,  795,  794,    0,
      809,  794,  787,  790,  797,  784,  783,  801,  796,  816,

      779,    0,    0,  783,  793,  826,  783,  782,  769,  771,
      769,  789,  764,  128,  784,  782,  780,  771,  766,  765,
      138,  762,  781,  780,  779,  139,  770,  759,  142,  764,
      753,  756,  773,  767,  751,  750,  767,  147,  748,    0,
        0,    0,  749,    0,  766,  765,  761,    0,  745,  746,
        0,  756,  747,  745,  753,  757,  748,  735,  745,  753,
      730,  732,  745,  748,  730,  729,  734,  740,  148,  741,
      725,  727,  727,    0,  719,  725,    0,  738,  732,    0,
        0,  965,  715,  715,  716,  732,  732,  712,  716,  724,
      144,  710,  722,  721,    0,  725,  706,  711,  721,  712,

      176,  707,  705,  706,  717,  707,  703,  699,    0,  712,
      698,  696,    0,  184,  705,  697,  694,  695,    0,  686,
      690,  150,  704,    0,    0,  686,  693,  679,  678,  684,
      698,  697,  676,  192,  694,  674,  675,  689,  669,  671,
      684,    0,  676,  672,  672,  676,  683,  665,  673,  663,
      673,  200,    0,  965,  675,  657,  672,  656,  673,    0,
      652,  651,  669,  657,    0,  652,  657,  666,  662,  661,
      651,  650,    0,    0,    0,    0,    0,    0,    0,    0,
      648,  658,  660,  654,  643,  642,  645,  644,    0,  639,
        0,    0,  167,  636,  648,  648,  650,    0,  632,  640,

      628,  632,  625,  631,  639,  638,  626,  629,  628,  630,
        0,    0,    0,    0,    0,    0,    0,    0,  626,  632,
      636,  630,  629,  628,  614,  615,  618,  624,  616,  624,
      606,  608,  619,  611,    0,    0,    0,    0,    0,    0,
        0,    0,  617,  603,  206,  615,  607,  613,  612,  601,
      608,    0,    0,  602,  613,    0,  592,  589,  606,  609,
      595,  606,  586,  597,  589,  598,    0,  581,  619,  600,
      585,  598,  584,  596,  576,  576,  577,  591,  570,  572,
      571,    0,  579,  578,  564,    0,  567,  565,    0,    0,
      583,    0,  574,  566,  580,    0,  559,    0,  557,    0,

      572,  607,  570,  578,  577,  551,    0,  566,  552,  551,
      554,    0,  562,  551,  565,  559,  558,  539,  545,  551,
      544,  557,  539,  542,  569,    0,  539,  549,  529,  535,
      545,  529,  539,  547,  534,  526,  524,  524,  523,  522,
      535,    0,  519,  519,  536,  518,  187,    0,  530,  534,
      965,  552,    0,    0,  530,  517,  510,  510,  509,  513,
      510,  191,  507,    0,  506,    0,  511,  504,  521,  520,
      499,    0,  500,  508,  498,    0,  498,  514,  497,  507,
        0,  511,  505,  504,  488,  487,  506,  504,  483,  503,
      502,  489,  485,  499,  183,  502,  492,  492,  490,  489,

      473,  488,    0,  479,  475,  469,  487,  487,  486,  483,
      482,    0,  483,  468,  480,  459,  456,  478,  463,  193,
      472,    0,    0,    0,  455,  454,  471,  191,  470,  455,
      458,  456,  467,  458,  446,    0,    0,  465,  460,    0,
      462,  462,  445,  448,  454,  442,  442,  437,  443,  442,
      448,  445,  435,  449,  440,  425,  446,  431,  426,  426,
        0,  428,  437,  421,  428,  438,  426,  429,  421,  434,
      420,  414,  414,  406,    0,  400,   22,   78,   75,  107,
        0,  136,  163,  193,  194,  183,    0,    0,  191,  184,
      196,  204,  193,  188,  206,  195,    0,  195,  209,  195,

      211,  216,  200,  216,    0,  200,  212,  206,  203,  208,
      224,  208,    0,    0,  207,  214,  215,  209,    0,  223,
      212,  221,  215,  235,  236,  222,  237,  225,  219,  227,
        0,    0,  224,  243,  228,    0,  226,    0,    0,    0,
        0,  242,  243,  247,  249,  242,  246,  232,  252,  253,
      245,  255,  255,  242,  257,  247,  240,  264,    0,  265,
      266,  255,  268,  270,  267,  271,  261,  259,  263,  261,
      263,  263,  259,  280,  280,  282,    0,  274,  261,  279,
      280,    0,  283,  287,    0,  275,  274,  279,  276,  281,
      289,  288,    0,  290,  277,  292,  279,  291,  300,  301,

      293,  300,  285,  298,  292,  300,  294,  310,  286,  311,
      308,  313,  307,  296,  314,  315,  318,  310,  321,  321,
      305,  323,  307,  325,    0,  324,    0,  326,  330,  323,
      312,  313,  331,  334,  335,    0,    0,    0,    0,  325,
      324,  320,  321,  341,  343,  329,  330,  341,  344,  336,
      334,  334,  339,  337,  338,  350,  354,  338,  339,  344,
      354,  344,  349,  354,  348,  346,  347,  356,  363,    0,
        0,  365,  355,  362,  356,  371,  355,    0,    0,  373,
      365,  351,  374,  377,  361,    0,    0,  377,  380,    0,
      357,    0,    0,  378,  381,    0,  371,  381,  384,  374,

      364,  387,    0,  366,    0,  965,  427,  434,  437,  440,
      447,  454,  443,  461
    } ;

static const flex_int16_t yy_def[915] =
    {   0,
      906,    1,  907,  907,  908,  908,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  909,  906,  906,  906,
      906,  906,  906,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  906,
      906,  906,  906,  906,  906,  906,  906,  911,  906,  906,
      906,  912,  913,  909,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,

      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      906,  906,  911,  906,  906,  912,  913,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,

      910,  910,  910,  910,  906,  911,  906,  906,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      914,  906,  906,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,

      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  906,  906,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,

      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  906,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,

      910,  906,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      906,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,

      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,

      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,

      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,

      910,  910,  910,  910,  910,    0,  906,  906,  906,  906,
      906,  906,  906,  906
    } ;

static const flex_int16_t yy_nxt[1030] =
    {   0,
        8,    9,   10,    8,    9,    8,   11,   12,   13,   14,
       15,    8,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   18,   19,   20,   21,   22,   23,   24,
       24,   24,   25,   26,   24,   24,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   24,   36,   37,   38,   39,
       40,   41,   24,   42,   43,   44,   24,   45,   46,   47,
       48,   49,   50,   51,   53,   53,   60,   61,   54,   54,
       56,   57,  710,   56,   58,   56,   57,   59,   56,   58,
       59,   68,   69,   82,   72,   74,   75,   84,   86,  132,
       70,   76,   71,   73,   85,   77,  133,   83,   78,   87,

       95,   92,   79,  101,   80,   93,   81,  102,   96,   98,
      103,   94,  108,   99,  109,  122,  110,   97,  122,   59,
      114,  711,   59,  100,  104,  712,  147,  105,  106,  111,
      158,  112,  113,  115,  141,  142,  143,  153,  144,  148,
      154,  171,  149,  159,  177,  178,  713,  160,  193,  161,
      182,  183,  195,  198,  122,  172,  230,  122,  184,  173,
      185,  174,  194,  186,  231,  199,  187,  254,  196,  240,
      241,  242,  289,  197,  297,  303,  255,  304,  307,  363,
      308,  290,  298,  317,  343,  318,  344,  714,  364,  373,
      374,  375,  376,  377,  378,  379,  380,  400,  345,  391,

      392,  393,  468,  715,  401,  411,  412,  413,  414,  415,
      416,  417,  418,  435,  436,  437,  438,  439,  440,  441,
      442,  504,  505,  592,  633,  593,  469,  604,  665,  605,
      634,  658,  659,  716,  717,  718,  506,  635,  719,  720,
      721,  722,  723,  724,  725,  666,  726,  660,  727,  728,
      729,  730,  731,  732,  733,  734,  735,  736,  737,  738,
      739,  740,  741,  742,  743,  744,  745,  746,  747,  748,
      749,  750,  751,  752,  753,  754,  755,  756,  757,  758,
      759,  760,  761,  762,  763,  764,  765,  766,  767,  769,
      768,  770,  772,  773,  774,  775,  776,  777,  778,  779,

      780,  781,  782,  771,  783,  784,  785,  786,  787,  788,
      789,  790,  791,  792,  793,  794,  795,  796,  797,  798,
      799,  800,  801,  802,  803,  804,  805,  806,  807,  808,
      809,  810,  811,  812,  813,  814,  815,  816,  817,  818,
      819,  820,  821,  822,  823,  824,  825,  826,  827,  828,
      829,  830,  831,  832,  833,  834,  835,  836,  837,  838,
      839,  840,  842,  841,  843,  844,  845,  846,  847,  848,
      849,  850,  852,  851,  853,  854,  855,  856,  857,  858,
      859,  860,  861,  862,  863,  864,  865,  866,  867,  868,
      869,  870,  871,  872,  873,  874,  875,  876,  877,  878,

      879,  880,  881,  882,  883,  884,  885,  886,  887,  888,
      889,  890,  891,  892,  893,  894,  895,  896,  897,  898,
      899,  900,  901,  902,  903,  904,  905,   52,   52,   52,
       52,   52,   52,   52,   55,   55,   55,   55,   55,   55,
       55,   64,   64,   65,   65,   65,   65,  123,  127,  709,
      123,  123,  123,  123,  126,  126,  708,  126,  126,  126,
      126,  354,  354,  354,  354,  354,  354,  707,  706,  705,
      704,  703,  702,  701,  700,  699,  698,  697,  696,  695,
      694,  693,  692,  691,  690,  689,  688,  687,  686,  685,
      684,  683,  682,  681,  680,  679,  678,  677,  676,  675,

      674,  673,  672,  671,  670,  669,  668,  667,  664,  663,
      662,  661,  657,  656,  655,  654,  653,  652,  651,  650,
      649,  648,  647,  646,  645,  644,  643,  642,  641,  640,
      639,  638,  637,  636,  632,  631,  630,  629,  628,  627,
      626,  625,  624,  623,  622,  621,  620,  619,  618,  617,
      616,  615,  614,  613,  612,  611,  610,  609,  608,  607,
      606,  603,  602,  601,  600,  599,  598,  597,  596,  595,
      594,  591,  590,  589,  588,  587,  586,  585,  584,  583,
      582,  581,  580,  579,  578,  577,  576,  575,  574,  573,
      572,  571,  570,  569,  568,  567,  566,  565,  564,  563,

      562,  561,  560,  559,  558,  557,  556,  555,  554,  553,
      552,  551,  550,  549,  548,  547,  546,  545,  544,  543,
      542,  541,  540,  539,  538,  537,  536,  535,  534,  533,
      532,  531,  530,  529,  528,  527,  526,  525,  524,  523,
      522,  521,  520,  519,  518,  517,  516,  515,  514,  513,
      512,  511,  510,  509,  508,  507,  503,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  480,
      479,  478,  477,  476,  475,  474,  473,  472,  471,  470,
      467,  466,  465,  464,  463,  462,  461,  460,  459,  458,

      457,  456,  455,  454,  453,  452,  451,  450,  449,  448,
      447,  446,  445,  444,  443,  434,  433,  432,  431,  430,
      429,  428,  427,  426,  425,  424,  423,  422,  421,  420,
      419,  410,  409,  408,  407,  406,  405,  404,  403,  402,
      399,  398,  397,  396,  395,  394,  390,  389,  388,  387,
      386,  385,  384,  383,  382,  381,  372,  371,  370,  369,
      368,  367,  366,  365,  362,  361,  360,  359,  358,  357,
      356,  355,  353,  352,  351,  350,  349,  348,  347,  346,
      342,  341,  340,  339,  338,  337,  336,  335,  334,  333,
      332,  331,  330,  329,  328,  327,  326,  325,  324,  323,

      322,  321,  320,  319,  316,  315,  314,  313,  312,  311,
      310,  309,  306,  305,  302,  301,  300,  299,  296,  295,
      294,  293,  292,  291,  288,  287,  286,  285,  284,  283,
      282,  206,  281,  280,  279,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  269,  268,  267,  266,  265,  264,
      263,  262,  261,  260,  259,  258,  257,  256,  253,  252,
      251,  250,  249,  248,  247,  246,  245,  244,  243,  239,
      238,  237,  236,  235,  234,  233,  232,  229,  228,  227,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  212,  211,  210,  209,  208,  207,

      206,  205,  204,  203,  202,  201,  200,  192,  191,  190,
      189,  188,  181,  180,  179,  176,  175,  170,  169,  168,
      167,  166,  165,  164,  163,  162,  157,  156,  155,  152,
      151,  150,  146,  145,  140,  139,  138,  137,  136,  135,
      134,  131,  130,  129,  128,   63,  125,  124,  121,  120,
      119,  118,  117,  116,  107,   91,   90,   89,   88,   67,
       66,   63,   62,  906,    7,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906
    } ;

static const flex_int16_t yy_chk[1030] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,   11,   11,    3,    4,
        5,    5,  677,    5,    5,    6,    6,    9,    6,    6,
        9,   27,   27,   30,   28,   29,   29,   31,   32,   70,
       27,   29,   27,   28,   31,   29,   70,   30,   29,   32,

       38,   37,   29,   40,   29,   37,   29,   40,   38,   39,
       41,   37,   43,   39,   43,   56,   43,   38,   56,   59,
       44,  678,   59,   39,   41,  679,   82,   41,   41,   43,
       90,   43,   43,   44,   78,   78,   78,   86,   78,   82,
       86,  100,   82,   90,  103,  103,  680,   90,  113,   90,
      107,  107,  114,  115,  122,  100,  151,  122,  107,  100,
      107,  100,  113,  107,  151,  115,  107,  176,  114,  160,
      160,  160,  214,  114,  221,  226,  176,  226,  229,  291,
      229,  214,  221,  238,  269,  238,  269,  682,  291,  301,
      301,  301,  301,  301,  301,  301,  301,  322,  269,  314,

      314,  314,  393,  683,  322,  334,  334,  334,  334,  334,
      334,  334,  334,  352,  352,  352,  352,  352,  352,  352,
      352,  445,  445,  547,  595,  547,  393,  562,  628,  562,
      595,  620,  620,  684,  685,  686,  445,  595,  689,  690,
      691,  692,  693,  694,  695,  628,  696,  620,  698,  699,
      700,  701,  702,  703,  704,  706,  707,  708,  709,  710,
      711,  712,  715,  716,  717,  718,  720,  721,  722,  723,
      724,  725,  726,  727,  728,  729,  730,  733,  734,  735,
      737,  742,  743,  744,  745,  746,  747,  748,  749,  750,
      749,  750,  751,  752,  753,  754,  755,  756,  757,  758,

      760,  761,  762,  750,  763,  764,  765,  766,  767,  768,
      769,  770,  771,  772,  773,  774,  775,  776,  778,  779,
      780,  781,  783,  784,  786,  787,  788,  789,  790,  791,
      792,  794,  795,  796,  797,  798,  799,  800,  801,  802,
      803,  804,  805,  806,  807,  808,  809,  810,  811,  812,
      813,  814,  815,  816,  817,  818,  819,  820,  821,  822,
      823,  824,  826,  824,  828,  829,  830,  831,  832,  833,
      834,  835,  840,  835,  841,  842,  843,  844,  845,  846,
      847,  848,  849,  850,  851,  852,  853,  854,  855,  856,
      857,  858,  859,  860,  861,  862,  863,  864,  865,  866,

      867,  868,  869,  872,  873,  874,  875,  876,  877,  880,
      881,  882,  883,  884,  885,  888,  889,  891,  894,  895,
      897,  898,  899,  900,  901,  902,  904,  907,  907,  907,
      907,  907,  907,  907,  908,  908,  908,  908,  908,  908,
      908,  909,  909,  910,  910,  910,  910,  911,  913,  676,
      911,  911,  911,  911,  912,  912,  674,  912,  912,  912,
      912,  914,  914,  914,  914,  914,  914,  673,  672,  671,
      670,  669,  668,  667,  666,  665,  664,  663,  662,  660,
      659,  658,  657,  656,  655,  654,  653,  652,  651,  650,
      649,  648,  647,  646,  645,  644,  643,  642,  641,  639,

      638,  635,  634,  633,  632,  631,  630,  629,  627,  626,
      625,  621,  619,  618,  617,  616,  615,  614,  613,  611,
      610,  609,  608,  607,  606,  605,  604,  602,  601,  600,
      599,  598,  597,  596,  594,  593,  592,  591,  590,  589,
      588,  587,  586,  585,  584,  583,  582,  580,  579,  578,
      577,  575,  574,  573,  571,  570,  569,  568,  567,  565,
      563,  561,  560,  559,  558,  557,  556,  555,  552,  550,
      549,  546,  545,  544,  543,  541,  540,  539,  538,  537,
      536,  535,  534,  533,  532,  531,  530,  529,  528,  527,
      525,  524,  523,  522,  521,  520,  519,  518,  517,  516,

      515,  514,  513,  511,  510,  509,  508,  506,  505,  504,
      503,  502,  501,  499,  497,  495,  494,  493,  491,  488,
      487,  485,  484,  483,  481,  480,  479,  478,  477,  476,
      475,  474,  473,  472,  471,  470,  469,  468,  466,  465,
      464,  463,  462,  461,  460,  459,  458,  457,  455,  454,
      451,  450,  449,  448,  447,  446,  444,  443,  434,  433,
      432,  431,  430,  429,  428,  427,  426,  425,  424,  423,
      422,  421,  420,  419,  410,  409,  408,  407,  406,  405,
      404,  403,  402,  401,  400,  399,  397,  396,  395,  394,
      390,  388,  387,  386,  385,  384,  383,  382,  381,  372,

      371,  370,  369,  368,  367,  366,  364,  363,  362,  361,
      359,  358,  357,  356,  355,  351,  350,  349,  348,  347,
      346,  345,  344,  343,  341,  340,  339,  338,  337,  336,
      335,  333,  332,  331,  330,  329,  328,  327,  326,  323,
      321,  320,  318,  317,  316,  315,  312,  311,  310,  308,
      307,  306,  305,  304,  303,  302,  300,  299,  298,  297,
      296,  294,  293,  292,  290,  289,  288,  287,  286,  285,
      284,  283,  279,  278,  276,  275,  273,  272,  271,  270,
      268,  267,  266,  265,  264,  263,  262,  261,  260,  259,
      258,  257,  256,  255,  254,  253,  252,  250,  249,  247,

      246,  245,  243,  239,  237,  236,  235,  234,  233,  232,
      231,  230,  228,  227,  225,  224,  223,  222,  220,  219,
      218,  217,  216,  215,  213,  212,  211,  210,  209,  208,
      207,  206,  205,  204,  201,  200,  199,  198,  197,  196,
      195,  194,  193,  192,  191,  189,  188,  187,  186,  185,
      184,  183,  182,  181,  180,  179,  178,  177,  175,  174,
      172,  171,  170,  169,  165,  164,  163,  162,  161,  159,
      158,  157,  156,  155,  154,  153,  152,  150,  149,  148,
      147,  146,  145,  144,  143,  142,  141,  140,  139,  137,
      136,  135,  134,  133,  132,  130,  129,  128,  125,  124,

      123,  121,  120,  119,  118,  117,  116,  112,  111,  110,
      109,  108,  106,  105,  104,  102,  101,   99,   98,   97,
       96,   95,   94,   93,   92,   91,   89,   88,   87,   85,
       84,   83,   80,   79,   77,   76,   75,   74,   73,   72,
       71,   69,   68,   67,   66,   64,   61,   60,   54,   49,
       48,   47,   46,   45,   42,   36,   35,   34,   33,   26,
       25,   17,   16,    7,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[179] =
    {   0,
0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "src/shaders_compiler/parser/parser.l"
#line 2 "src/shaders_compiler/parser/parser.l"
    #define YY_DECL int shlex(ShadersSystem::Compiler& compiler)

    #include "limits.h"

    #include <engine/log.h>

    #include <stdio.h>
    #include <filesystem>
    #include "parser.tab.hpp"

    void sherror(ShadersSystem::Compiler& compiler, const char* msg);
    extern int shlex(ShadersSystem::Compiler& compiler);

    string codeBuf;

    namespace fs = std::filesystem;
#line 1281 "src/shaders_compiler/parser/lex.yy.cpp"
#define YY_NO_UNISTD_H 1

#line 1284 "src/shaders_compiler/parser/lex.yy.cpp"

#define INITIAL 0
#define hlsl 1
#define include 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 29 "src/shaders_compiler/parser/parser.l"


#line 1506 "src/shaders_compiler/parser/lex.yy.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 907 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 906 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 31 "src/shaders_compiler/parser/parser.l"
{
  codeBuf = "";
  BEGIN(hlsl);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 36 "src/shaders_compiler/parser/parser.l"
{
  codeBuf += *yytext;
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 40 "src/shaders_compiler/parser/parser.l"
{
  codeBuf += "\n";
}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 44 "src/shaders_compiler/parser/parser.l"
{
  BEGIN(INITIAL);
  shlval.sval = strdup(codeBuf.c_str());
  return TFX_TOKEN_HLSL_CODE;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 51 "src/shaders_compiler/parser/parser.l"
{

}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 55 "src/shaders_compiler/parser/parser.l"
{
  char* fileName = yytext + 1;
  fileName[strlen(yytext) - 2] = '\0';

  const string currentDir = fs::path(compiler.getCurrentFileName()).parent_path().string();
  const string file = fmt::format("{}/{}", currentDir, fileName);
  yyin = fopen( file.c_str(), "r" );

  if (!yyin)
  {
    const string error = fmt::format("can't include file `{}`: File not found", fileName);
    sherror(compiler, error.c_str());
    yyterminate();
  }

  compiler.pushFile(file);

	yypush_buffer_state(yy_create_buffer( yyin, YY_BUF_SIZE ));
  BEGIN(INITIAL);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 76 "src/shaders_compiler/parser/parser.l"
{
  const std::string error = fmt::format("unexpected string: {}", yytext);
  sherror(compiler, error.c_str());
  yyterminate();
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 82 "src/shaders_compiler/parser/parser.l"
{
  BEGIN(include);
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hlsl):
case YY_STATE_EOF(include):
#line 87 "src/shaders_compiler/parser/parser.l"
{
  fclose(yyin);
  yypop_buffer_state();
  if ( !YY_CURRENT_BUFFER )
  {
    yyterminate();
  }
  compiler.popFile();
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 97 "src/shaders_compiler/parser/parser.l"
; // comment
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 99 "src/shaders_compiler/parser/parser.l"
;
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 101 "src/shaders_compiler/parser/parser.l"
{
  compiler.incLine();
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 105 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_AT;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 109 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_COLON;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 113 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SEMICOLON;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 117 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_EQUAL_OP;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 121 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_LEFT_PARENTHESIS;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 125 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_RIGHT_PARENTHESIS;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 129 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_LEFT_BRACKET;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 133 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_RIGHT_BRACKET;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 137 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_LESS_SIGN;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 141 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_GREATER_SIGN;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 145 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_COMMA;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 149 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_MINUS;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 153 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SCOPE;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 157 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_RESERVE;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 161 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_REGISTER;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 165 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TEXTURE;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 169 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SAMPLER;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 173 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_INPUT;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 177 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_BUFFER;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 181 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_CBUFFER;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 185 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_EXTERN;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 189 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_CHANNEL;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 193 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DESCRIPTOR_SET;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 197 "src/shaders_compiler/parser/parser.l"
{
  shlval.bval = false;
  return TFX_TOKEN_BOOL_VAL;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 202 "src/shaders_compiler/parser/parser.l"
{
  shlval.bval = true;
  return TFX_TOKEN_BOOL_VAL;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 207 "src/shaders_compiler/parser/parser.l"
{
  shlval.bval = false;
  return TFX_TOKEN_BOOL_VAL;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 212 "src/shaders_compiler/parser/parser.l"
{
  shlval.bval = true;
  return TFX_TOKEN_BOOL_VAL;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 217 "src/shaders_compiler/parser/parser.l"
{
  shlval.ival = atoi(yytext);
  return TFX_TOKEN_INT_VAL;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 222 "src/shaders_compiler/parser/parser.l"
{ 
  shlval.fval = atof(yytext);
  return TFX_TOKEN_FLOAT_VAL;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 227 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_FLOAT;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 231 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_FLOAT2;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 235 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_FLOAT3;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 239 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_FLOAT4;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 243 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_FLOAT4_u8;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 247 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_FLOAT4X4;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 251 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_INT;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 255 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_INT2;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 259 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_INT3;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 263 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_INT4;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 267 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TEXTURE2D;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 271 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TEXTURE3D;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 275 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TEXTURE_CUBE;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 279 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_RWTEXTURE3D;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 283 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TECHNIQUE;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 287 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TECHNIQUE_MACRO;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 291 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ACTIVATE;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 295 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SUPPORT;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 299 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_COMPILE;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 303 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_RENDER_STATE;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 307 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_CULL_MODE;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 311 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_NONE;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 315 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_CCW;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 319 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_CW;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 323 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PRIMITIVE_TOPOLOGY;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 327 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_POINT_LIST;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 331 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_LINE_LIST;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 335 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_LINE_STRIP;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 339 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_TRIANGLE_LIST;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 343 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_TRIANGLE_FAN;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 347 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_TRIANGLE_STRIP;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 351 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_LINE_LIST_WITH_ADJACENCY;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 355 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_LINE_STRIP_WITH_ADJACENCY;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 359 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_TRIANGLE_LIST_WITH_ADJACENCY;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 363 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_TRIANGLE_STRIP_WITH_ADJACENCY;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 367 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PT_PATCH_LIST;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 371 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DEPTH;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 375 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_STENCIL;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 379 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TEST;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 383 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_WRITE;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 387 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_FAIL_OP;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 391 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_PASS_OP;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 395 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DEPTH_FAIL_OP;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 399 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_COMPARE_OP;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 403 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_REFERENCE_VALUE;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 407 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_NEVER;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 411 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_LESS;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 415 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_EQUAL;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 419 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_LESS_OR_EQUAL;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 423 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_GREATER;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 427 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_NOT_EQUAL;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 431 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_GREATER_OR_EQUAL;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 435 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ALWAYS;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 439 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_KEEP;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 443 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ZERO;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 447 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_REPLACE;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 451 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_INCREMENT_AND_CLAMP;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 455 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DECREMENT_AND_CLAMP;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 459 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_INVERT;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 463 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_INCREMENT_AND_WRAP;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 467 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DECREMENT_AND_WRAP;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 471 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_BLENDING;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 475 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_HAS_BLANDING;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 479 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_LOGIC_OP_ENABLED;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 483 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_LOGIC_OP;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 487 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_BLEND_CONSTANTS;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 491 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_MRT;
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 495 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SRC_COLOR_BLEND_FACTOR;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 499 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DST_COLOR_BLEND_FACTOR;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 503 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_COLOR_BLEND_OP;
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 507 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SRC_ALPHA_BLEND_FACTOR;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 511 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DST_ALPHA_BLEND_FACTOR;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 515 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ALPHA_BLEND_OP;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 519 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 523 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SRC_COLOR;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 527 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE_MINUS_SRC_COLOR;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 531 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DST_COLOR;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 535 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE_MINUS_DST_COLOR;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 539 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SRC_ALPHA;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 543 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE_MINUS_SRC_ALPHA;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 547 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_DST_ALPHA;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 551 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE_MINUS_DST_ALPHA;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 555 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_CONSTANT_COLOR;
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 559 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE_MINUS_CONSTANT_COLOR;
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 563 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_CONSTANT_ALPHA;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 567 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE_MINUS_CONSTANT_ALPHA;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 571 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SRC_ALPHA_SATURATE;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 575 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SRC_ONE_COLOR;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 579 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE_MINUS_SRC_ONE_COLOR;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 583 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SRC_ONE_ALPHA;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 587 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ONE_MINUS_SRC_ONE_ALPHA;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 591 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_ADD;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 595 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SUBTRACT;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 599 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_REVERSE_SUBTRACT;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 603 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_MIN;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 607 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_MAX;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 611 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_CLEAR;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 615 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_AND;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 619 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_AND_REVERSE;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 623 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_COPY;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 627 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_AND_INVERTED;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 631 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_NO_OP;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 635 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_XOR;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 639 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_OR;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 643 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_NOR;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 647 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_EQUIVALENT;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 651 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_OR_REVERSE;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 655 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_COPY_INVERTED;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 659 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_OR_INVERTED;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 663 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_NAND;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 667 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_SET;
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 672 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_VS_6_0;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 676 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_VS_6_1;
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 680 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_VS_6_2;
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 684 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_VS_6_3;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 688 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_VS_6_4;
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 692 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_VS_6_5;
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 696 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_VS_6_6;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 700 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_VS_6_7;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 704 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_PS_6_0;
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 708 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_PS_6_1;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 712 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_PS_6_2;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 716 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_PS_6_3;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 720 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_PS_6_4;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 724 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_PS_6_5;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 728 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_PS_6_6;
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 732 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_PS_6_7;
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 736 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_CS_6_0;
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 740 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_CS_6_1;
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 744 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_CS_6_2;
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 748 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_CS_6_3;
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 752 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_CS_6_4;
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 756 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_CS_6_5;
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 760 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_CS_6_6;
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 764 "src/shaders_compiler/parser/parser.l"
{
  return TFX_TOKEN_TARGET_CS_6_7;
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 768 "src/shaders_compiler/parser/parser.l"
{
  const size_t len = strlen(yytext);
  if (len >= RESOURCE_MAX_NAME_LEN)
  {
    const string error = fmt::format("lexical error: variable name `{}` exceeds max length. {} > {}`", yytext, len, RESOURCE_MAX_NAME_LEN-1);
    sherror(compiler, error.c_str());
  }
  else
  {
    shlval.sval = strdup(yytext);
    return TFX_TOKEN_NAME_VAL;
  }
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 782 "src/shaders_compiler/parser/parser.l"
{ 
  const string error =  fmt::format("lexical error in `{}`", yytext);
  sherror(compiler, error.c_str());}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 786 "src/shaders_compiler/parser/parser.l"
ECHO;
	YY_BREAK
#line 2864 "src/shaders_compiler/parser/lex.yy.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 907 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 907 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 906);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 786 "src/shaders_compiler/parser/parser.l"


