import clang.cindex
import cursor_utils as utils
import os.path
import re
import tags
import templates

reflection_tmpl = """
#pragma once
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
//
//                                          XXXXXX                                
//                                        XX      XX                            
//                                      XX          XX                                    
//                                      XX          XX                                    
//                                    XX              XX                                
//                                  XX      XXXXXX      XX                                
//                                  XX      XXXXXX      XX              
//                                XX        XXXXXX        XX                              
//                                XX        XXXXXX        XX                              
//                              XX          XXXXXX          XX                            
//                            XX            XXXXXX            XX                          
//                            XX            XXXXXX            XX                          
//                          XX              XXXXXX              XX                        
//                          XX                                  XX                        
//                        XX                XXXXXX                XX                      
//                        XX                XXXXXX                XX                      
//                      XX                  XXXXXX                  XX                    
//                      XX                                          XX                    
//                        XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX       
//
//                          this file is generated by ecs codegen
//                          do not edit
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   

#include <engine/reflection/class.h>

template<>
auto get_static_class<class {compClass}>() -> const Class*;

#undef GENERATED_BODY
#define GENERATED_BODY                      \\
  friend class {compReflClass};             \\
  public:                                   \\
    auto getClass() -> const Class*;        \\
    static                                  \\
    auto getStaticClass() -> const Class*;  \\
  private:
"""

def pregen_reflection_header(src):
  hFilePath = src.replace(".ecs.cpp", ".h")
  if not os.path.isfile(hFilePath):
    return
  with open(hFilePath, 'r') as hFile:
    content = hFile.read()
    compClassBegin = re.search("ECS_COMPONENT\(.*\)[^\{]*\{", content)
    if compClassBegin is not None:
      compClassBegin = compClassBegin.group().replace('\n', '')
      compClass = compClassBegin[compClassBegin.rfind(')')+1:-1]
      compReflClass = f"{compClass}Class"
      with open(src.replace(".ecs.cpp", ".gen.h"), 'w') as hGenFile:
        hGenFile.write(reflection_tmpl.format(
          compClass = compClass,
          compReflClass = compReflClass
        ))

class PropertyReflection:
  def __init__(self, cursor, comp_class, annotation):
    self.name = cursor.spelling
    self.member = cursor.spelling
    self.annotation = annotation
    self.compClass = comp_class
    cppType = utils.get_cursor_type_name(cursor.type)
    prefix = "ClassField::Type::"
    if cppType.startswith('int') or cppType.startswith('float') or cppType == 'string':
      self.type = f'{prefix}{cppType.capitalize()}'
    else:
      raise ValueError(f'Property {self.name} has unsupported type {cppType}')

class ClassReflection:
  def processProperties(self, fn_cursor, comp_class):
    properties = []
    for child in fn_cursor.get_children():
      if child.kind == clang.cindex.CursorKind.FIELD_DECL:
        for fieldChild in child.get_children():
          if fieldChild.kind == clang.cindex.CursorKind.ANNOTATE_ATTR and fieldChild.spelling.startswith(tags.REFL_PROPERTY_TAG):
            annotation = fieldChild.spelling
            properties.append(PropertyReflection(child, comp_class, annotation))
    self.properties = properties

  def __init__(self, fn_cursor):
    self.compClass = fn_cursor.spelling
    self.compReflClass = f"{self.compClass}Class"
    self.processProperties(fn_cursor, self.compClass)

  def generate(self):
    return templates.generate_reflection_class(self.compClass, self.compReflClass, self.properties)