import clang.cindex
import os
from tags import *
from reflection import ClassReflection

import parsed_types_ecs as parsed_ecs
import parsed_types_fg as parsed_fg

def parse_attempt(src, clangArgs):
  index = clang.cindex.Index.create()
  translation_unit = index.parse(src, clangArgs)
  errors = []
  for d in translation_unit.diagnostics:
    if d.severity >= clang.cindex.Diagnostic.Error:
      errors = errors + ["error({}): {} [at {}]".format(d.severity, d.spelling, d.location)]
  return [translation_unit, errors]

def parse_ecs_file(src, clangArgs):
  translation_unit, errors = parse_attempt(src, clangArgs)
  if len(errors) > 0:
    raise ValueError("\n".join(map(str,errors)))
  return translation_unit

def get_src_generated_begin(src):
  return [
    "// this file is generated by ecs codegen",
    "// do not edit",
    "#include <engine/ecs/ecs.h>",
    "#include <engine/ecs/components_accessor.h>",
    "#include <EASTL/functional.h>",
    "",
    """#include "{}" """.format(os.path.basename(src)),
    "",
    "using namespace ecs;"
  ]

def generate_ecs_impl(from_src, includeArgs, defineArgs):
  header = from_src.replace('.ecs.cpp', '.h').replace('/', '\\')
  generated_code = get_src_generated_begin(from_src)

  clangArgs = ["-x", "c++", "--std=c++20"] + includeArgs + defineArgs
  translation_unit = parse_ecs_file(from_src, clangArgs)

  fgExecFnCursors = {}
  srcGenerators = []

  for fnCursor in translation_unit.cursor.get_children():
    if fnCursor.kind == clang.cindex.CursorKind.FUNCTION_DECL:
      paramCursors = []
      isEsSystem = False
      isEsEventSystem = False
      isEsQuery = False
      isFgExec = False

      for child in fnCursor.get_children():
        if child.kind == clang.cindex.CursorKind.PARM_DECL:
          paramCursors = paramCursors + [child]
        elif child.kind == clang.cindex.CursorKind.ANNOTATE_ATTR:
          if child.spelling == ES_SYSTEM_TAG:
            isEsSystem = True
          elif child.spelling == ES_EVENT_SYSTEM_TAG:
            isEsEventSystem = True
          elif child.spelling == ES_QUERY_TAG:
            isEsQuery = True
          elif child.spelling == FG_EXEC_TAG:
            isFgExec = True

      if isEsQuery:
        srcGenerators = srcGenerators + [parsed_ecs.Query(fnCursor, paramCursors)]
      elif isEsSystem:
        srcGenerators = srcGenerators + [parsed_ecs.System(fnCursor, paramCursors)]
      elif isEsEventSystem:
        srcGenerators = srcGenerators + [parsed_ecs.EventSystem(fnCursor, paramCursors)]
      elif isFgExec:
        fgExecFnCursors[fnCursor.spelling] = (fnCursor, paramCursors)

    elif fnCursor.kind == clang.cindex.CursorKind.STRUCT_DECL:
      for child in fnCursor.get_children():
        if child.kind == clang.cindex.CursorKind.ANNOTATE_ATTR and child.spelling == FG_DSL_TAG:
          srcGenerators = srcGenerators + [parsed_fg.FgNode(fnCursor, fgExecFnCursors)]

    elif fnCursor.kind == clang.cindex.CursorKind.CLASS_DECL:
      location = fnCursor.location.file.name.replace('/', '\\')
      if location == header:
        for child in fnCursor.get_children():
          if child.kind == clang.cindex.CursorKind.ANNOTATE_ATTR and child.spelling == REFL_CLASS_TAG:
            srcGenerators = srcGenerators + [ClassReflection(fnCursor)]

  generated_code.extend([g.generate() for g in srcGenerators])
  final_src = '\n'.join(generated_code)

  return final_src
