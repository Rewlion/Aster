import clang.cindex
import os

ES_SYSTEM_TAG = "ecs_system"
ES_EVENT_SYSTEM_TAG = "ecs_event_system"
ES_QUERY_TAG = "ecs_query"

import parsed_types as parsed

def generate_ecs_impl(from_src, includeArgs, defineArgs):
  generated_code = [
    "// this file is generated by ecs codegen",
    "// do not edit",
    "#include <engine/ecs/ecs.h>",
    "#include <engine/ecs/components_accessor.h>",
    "#include <EASTL/functional.h>",
    "",
    """#include "{}" """.format(os.path.basename(from_src)),
    "",
    "using namespace Engine::ECS;"
  ]

  index = clang.cindex.Index.create()
  clangArgs = ["-x", "c++", "--std=c++20"] + includeArgs + defineArgs

  translation_unit = index.parse(from_src, clangArgs)

  errors = []
  for d in translation_unit.diagnostics:
    if d.severity >= clang.cindex.Diagnostic.Error:
      errors = errors + ["error({}): {} [at {}]".format(d.severity, d.spelling, d.location)]

  if len(errors) > 0:
    raise ValueError("\n".join(map(str,errors)))

  generators = []
  for fnCursor in translation_unit.cursor.get_children():
    if fnCursor.kind == clang.cindex.CursorKind.FUNCTION_DECL:
      name = fnCursor.spelling
      paramCursors = []
      isEsSystem = False
      isEsEventSystem = False
      isEsQuery = False

      for child in fnCursor.get_children():
        if child.kind == clang.cindex.CursorKind.PARM_DECL:
          paramCursors = paramCursors + [child]
        elif child.kind == clang.cindex.CursorKind.ANNOTATE_ATTR:
          if child.spelling == ES_SYSTEM_TAG:
            isEsSystem = True
          elif child.spelling == ES_EVENT_SYSTEM_TAG:
            isEsEventSystem = True
          elif child.spelling == ES_QUERY_TAG:
            isEsQuery = True

      if isEsSystem and isEsQuery:
        raise ValueError("ERROR: {} can't be es_function and es_query in the same time [{}]".format(name, fnCursor.location))

      if isEsQuery:
        generators = generators + [parsed.Query(fnCursor, paramCursors)]
      elif isEsSystem:
        generators = generators + [parsed.System(fnCursor, paramCursors)]
      elif isEsEventSystem:
        generators = generators + [parsed.EventSystem(fnCursor, paramCursors)]
  
  generated_code.extend([g.generate() for g in generators])
  final_src = '\n'.join(generated_code)

  return final_src
