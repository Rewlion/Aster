// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "collect_camera.ecs.cpp" 

using namespace ecs;

const static DirectQueryRegistration query_camera_queryReg{
  {
    DESCRIBE_QUERY_COMPONENT("pos", float3),
    DESCRIBE_QUERY_COMPONENT("forward", float3),
    DESCRIBE_QUERY_COMPONENT("camera_fov", float),
    DESCRIBE_QUERY_COMPONENT("camera_zNear", float),
    DESCRIBE_QUERY_COMPONENT("camera_zFar", float)
  },
  "query_camera"};
const static query_id_t query_camera_queryId = query_camera_queryReg.getId();


void query_camera (eastl::function<
  void(
    const float3& pos,
    const float3& forward,
    const float& camera_fov,
    const float& camera_zNear,
    const float& camera_zFar)> cb)
{
  ecs::get_registry().query(query_camera_queryId, [&](ComponentsAccessor& accessor)
  {
    const float3& pos = accessor.get<float3>(compile_ecs_name_hash("pos"));
    const float3& forward = accessor.get<float3>(compile_ecs_name_hash("forward"));
    const float& camera_fov = accessor.get<float>(compile_ecs_name_hash("camera_fov"));
    const float& camera_zNear = accessor.get<float>(compile_ecs_name_hash("camera_zNear"));
    const float& camera_zFar = accessor.get<float>(compile_ecs_name_hash("camera_zFar"));
    cb(pos,forward,camera_fov,camera_zNear,camera_zFar);
  });
}
