#include "frame.inc.tfx"
#include "gbuffer.inc.tfx"
#include "mesh.inc.tfx"
#include "normals.inc.tfx"

technique SceneOpaque {
  support scope FrameScope;
  support scope StaticModelScope;

  USE_STATIC_MESH();
  USE_NORMALS_UTILS();
  USE_GBUFFER();

  #hlsl
    struct VsOutput
    {
      float4 pos: SV_Position;
      float3 worldPos: POSITION0;
      float2 uv: TEXTURE0;
      float3 normal: TEXTURE1;
    };

    VsOutput vs_main(SceneOpaque_input input)
    {
      float4x4 mvp = FrameScope.viewProj;
      mvp = mul(mvp, StaticModelScope.modelTm);

      VsOutput output;
      output.pos = mul(mvp, float4(input.pos, 1.0));
      output.worldPos = mul(StaticModelScope.modelTm, float4(input.pos, 1.0)).xyz;
      output.uv = input.uv;
      output.normal = normalize(mul(StaticModelScope.normalTm, float4(input.normal, 0.0)).xyz);

      return output;
    }

    GbufferOutput ps_main(VsOutput input)
    {
      float4 albedo = albedoTex.Sample(modelSampler, input.uv);
      float3 metalRoughness = metalRoughnessTex.Sample(modelSampler, input.uv).rgb;
      float metal = metalRoughness.b;
      float roughness = metalRoughness.g;

      float3 viewDir = normalize(input.worldPos - FrameScope.cameraPos);
      float3 normal_ts = normalTex.Sample(modelSampler, input.uv).rgb * 2.0 - 1.0;
      float3 normal = perturbNormal(normal_ts, input.normal, viewDir, input.uv);

      Gbuffer gbuffer;
      init_albedo(gbuffer, albedo);
      init_metal(gbuffer, metal);
      init_roughness(gbuffer, roughness);
      init_normal(gbuffer, normal);
      init_worldPos(gbuffer, input.worldPos);

      return encode_gbuffer(gbuffer);
    }
  #end

  compile(vs_6_1, vs_main);
  compile(ps_6_1, ps_main);
};
