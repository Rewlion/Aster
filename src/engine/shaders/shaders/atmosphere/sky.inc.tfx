technique_macro USE_SKY_LUT {
  #hlsl
  float3 sampleSkyLUT(float3 view_dir)
  {
    float altitude = PI/2.0 - acos(view_dir.y);
    float2 xzDir = normalize(float2(view_dir.x, view_dir.z));
    float azimuth = fmod(atan2(xzDir.x, xzDir.y) + 2*PI, 2*PI);

    float v = altitude >= 0.0 ? 0.5 + 0.5 * sqrt(altitude / (PI/2.0))
                              : 0.5 - 0.5 * sqrt(abs(altitude) / (PI/2.0));
  
    float u = azimuth / (2.0 * PI);
    float2 uv = float2(u,v);

    return skyLUT.SampleLevel(linearClampSampler, uv, 0).rgb;
  }

  float3 calcSunDisk(AtmosphereParams atm_params, float3 view_dir, float3 sun_dir)
  {
    float3 pos = atm_params.posMM;
    float3 RBot_mm;
    float botAtmDist_mm = raySphereIntersection(pos, view_dir, float3(0,0,0), atm_params.rBotMM, RBot_mm);
    if (botAtmDist_mm > 0.0)
      return float3(0.0, 0.0, 0.0);

    float VoL = dot(view_dir, sun_dir);
    float VoZ = view_dir.y;

    float sunRadiusMul = 1.3;
    float sunEdgeAngle = 0.5 * sunRadiusMul * PI / 180.0;
    float cosSunEdge = cos(sunEdgeAngle);
    
    if (VoL < cosSunEdge)
        return float3(0.0, 0.0, 0.0);

    float r = (1.0 - VoL) / (1.0 - cosSunEdge);

    float3 a = float3(0.397 , 0.503 , 0.652);
    float3 u = float3(1.0, 1.0, 1.0);
    float limbDarkeningMul = 0.5;
    r = 1.0-r;
    float3 mu = float3(r,r,r)*limbDarkeningMul;

    float3 limbDarkening = 1.0 - u * (1.0 - pow(mu , a));
    float3 sunDisk = limbDarkening * sampleTransmittance(length(pos), VoZ, atm_params.rBotMM, atm_params.rTopMM);
    return sunDisk;
  }
  #end
};

technique_macro USE_SKY_RAYMARCH {
  #hlsl
  float3 raymarchScattering(float3 p0_mm, float scattering_dist_mm, float3 view_dir, float3 sun_dir, AtmosphereParams atm_params, out float3 transmittance)
  { 
    float VoL = dot(view_dir, sun_dir);

    float rayPhase = RayleighPhaseFunction(VoL);
    float miePhase = MiePhaseFunction(VoL, 0.76);

    float3 L = float3(0,0,0);
    float3 Tr = float3(1,1,1);

    float t = 0.0;
    for (float i = 0.0; i < SCATTERING_STEPS; i += 1.0)
    {
      float newT = (i+0.3)/SCATTERING_STEPS * scattering_dist_mm;
      float dt = newT - t;
      t = newT;

      float3 Ri_mm = p0_mm + view_dir * t;
      float3 RiDir = normalize(Ri_mm);
      float Ri_len_mm = length(Ri_mm);
      float RioSDir = dot(RiDir, sun_dir);

      float3 rayScattering, extintion;
      float3 mieScattering;
      calcScatteringValues(atm_params, Ri_mm, rayScattering, mieScattering, extintion);

      float3 Tri = exp(-extintion * dt);
      float3 TrSun = sampleTransmittance(Ri_len_mm, RioSDir, atm_params.rBotMM, atm_params.rTopMM);
      float3 psi = samplePsi(atm_params, Ri_len_mm, -sun_dir.y);

      float3 Si = rayScattering*(rayPhase*TrSun+psi) + mieScattering * (miePhase *TrSun+psi);
      float3 Li = Si*(1.0 -  Tri) / extintion;

      L += Li * Tr;
      Tr *= Tri;
    }

    transmittance = Tr;
    return L;
  }
  #end
};