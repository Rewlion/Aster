#include <frame.inc.tfx>
#include <screen_space.inc.tfx>
#include "atmosphere.inc.tfx"
#include "ebruneton.inc.tfx"
#include "multiple_scattering.inc.tfx"
#include "scattering.inc.tfx"
#include "sky.inc.tfx"
#include "transmittance.inc.tfx"

scope SkyLUTScope {
  reserve:
    descriptor_set(2);
    register(texture, 0-1);

  Texture2D trLUT = extern(trLUT);
  Texture2D msLUT = extern(msLUT);
};

technique SkyLUT {
  support scope FrameScope;
  activate scope SkyLUTScope;

  #hlsl
  #include "math.hlsl"
  #end

  USE_ATMOSPHERE_PARAMS();
  
  USE_EBRUNETON_HELPERS();
  USE_SCATTERING();
  USE_TRANSMITTANCE_LUT();
  USE_MULTIPLE_SCATTERING_LUT();
  USE_SKY_RAYMARCH();
  USE_SCREENSPACE_BASE();

  #hlsl
    float3 ps_main(VsOutput input) : SV_Target0
    {
      float2 uv = input.pos.xy / SKY_LUT_SIZE;

      float azimuth = uv.x*2.0*PI;
      float altitude = 0.0;
      if (uv.y >= 0.5) //too much space is wasted for terrain
        altitude = pow(2*uv.y - 1.0, 2.0) * PI/2.0;
      else
        altitude = pow(1.0 - 2*uv.y, 2.0) * (-PI/2.0);

      AtmosphereParams atmParams = getAtmosphereParams();
      float3 p0_mm = atmParams.posMM;

      float3 viewDir = altitudeAzimuthToDecartian(altitude, azimuth);
      float3 sunDir = getAtmSunDir();

      float3 RTop_mm;
      float topAtmDist_mm = raySphereIntersection(p0_mm, viewDir, float3(0,0,0), atmParams.rTopMM, RTop_mm);
    
      float3 RBot_mm;
      float botAtmDist_mm = raySphereIntersection(p0_mm, viewDir, float3(0,0,0), atmParams.rBotMM, RBot_mm);
    
      float scatteringDist_mm = botAtmDist_mm > 0.0 ? botAtmDist_mm : topAtmDist_mm;
      float3 Tr;
      float3 L = raymarchScattering(p0_mm, scatteringDist_mm, viewDir, sunDir, atmParams, Tr);

      return L;
    }
  #end

  compile(vs_6_1, vs_main);
  compile(ps_6_1, ps_main);
};