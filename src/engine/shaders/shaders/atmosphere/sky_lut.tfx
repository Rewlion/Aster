#include "../frame.inc.tfx"
#include "../math.inc.tfx"
#include "../screen_space.inc.tfx"
#include "atmosphere.inc.tfx"
#include "ebruneton.inc.tfx"
#include "multiple_scattering.inc.tfx"
#include "scattering.inc.tfx"
#include "transmittance.inc.tfx"

scope SkyLUTScope {
  reserve:
    descriptor_set(2);
    register(texture, 0-1);

  Texture2D trLUT = extern(trLUT);
  Texture2D msLUT = extern(msLUT);
};

technique SkyLUT {
  support scope FrameScope;
  USE_ATMOSPHERE_PARAMS();
  activate scope SkyLUTScope;

  USE_MATH();
  USE_EBRUNETON_HELPERS();
  USE_SCATTERING();
  USE_TRANSMITTANCE_LUT();
  USE_MULTIPLE_SCATTERING_LUT();
  USE_SCREENSPACE_BASE();

  #hlsl
    float3 raymarchScattering(float3 p0_mm, float scattering_dist_mm, float3 view_dir, float3 sun_dir, AtmosphereParams atm_params)
    { 
      float VoL = dot(view_dir, sun_dir);

      float rayPhase = RayleighPhaseFunction(VoL);
      float miePhase = MiePhaseFunction(VoL, 0.76);

      float3 L = float3(0,0,0);
      float3 Tr = float3(1,1,1);

      float t = 0.0;
      for (float i = 0.0; i < SCATTERING_STEPS; i += 1.0)
      {
        float newT = (i+0.3)/SCATTERING_STEPS * scattering_dist_mm;
        float dt = newT - t;
        t = newT;

        float3 Ri_mm = p0_mm + view_dir * t;
        float3 RiDir = normalize(Ri_mm);
        float Ri_len_mm = length(Ri_mm);
        float RioSDir = dot(RiDir, sun_dir);

        float3 rayScattering, extintion;
        float3 mieScattering;
        calcScatteringValues(atm_params, Ri_mm, rayScattering, mieScattering, extintion);

        float3 Tri = exp(-extintion * dt);
        float3 TrSun = sampleTransmittance(Ri_len_mm, RioSDir, atm_params.rBotMM, atm_params.rTopMM);
        float3 psi = samplePsi(atm_params, Ri_len_mm, -sun_dir.y);

        float3 Si = rayScattering*(rayPhase*TrSun+psi) + mieScattering * (miePhase *TrSun+psi);
        float3 Li = Si*(1.0 -  Tri) / extintion;

        L += Li * Tr;
        Tr *= Tri;
      }

      return L;
    }

    float3 ps_main(VsOutput input) : SV_Target0
    {
      float2 uv = input.pos.xy / SKY_LUT_SIZE;

      float azimuth = uv.x*2.0*PI;
      float altitude = 0.0;
      if (uv.y >= 0.5) //too much space is wasted for terrain
        altitude = pow(2*uv.y - 1.0, 2.0) * PI/2.0;
      else
        altitude = pow(1.0 - 2*uv.y, 2.0) * (-PI/2.0);

      AtmosphereParams atmParams = getAtmosphereParams();
      float3 p0_mm = float3(0.0, atmParams.rBotMM + 0.0002, 0.0);

      float3 viewDir = altitudeAzimuthToDecartian(altitude, azimuth);
      float3 sunDir = altitudeAzimuthToDecartian(AtmosphereScope.sunAzimuth_Altitude.y, AtmosphereScope.sunAzimuth_Altitude.x);

      float3 RTop_mm;
      float topAtmDist_mm = raySphereIntersection(p0_mm, viewDir, float3(0,0,0), atmParams.rTopMM, RTop_mm);
    
      float3 RBot_mm;
      float botAtmDist_mm = raySphereIntersection(p0_mm, viewDir, float3(0,0,0), atmParams.rBotMM, RBot_mm);
    
      float scatteringDist_mm = botAtmDist_mm > 0.0 ? botAtmDist_mm : topAtmDist_mm;
      float3 L = raymarchScattering(p0_mm, scatteringDist_mm, viewDir, sunDir, atmParams);

      return L;
    }
  #end

  compile(vs_6_1, vs_main);
  compile(ps_6_1, ps_main);
};