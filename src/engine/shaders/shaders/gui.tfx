#include "frame.inc.tfx"

scope GuiScope {
  reserve:
    descriptor_set(2);
    register(buffer, 0);

  float4 pos_size = extern(guiPos_guiSize);
  float4 color = extern(guiColor);
};

technique Gui {
  support scope FrameScope;
  support scope GuiScope;

  render_state:
    primitive_topology = triangle_strip;
    depth:
      test = no;
      write = no;
    blending:
      mrt(0):
        has_blending = yes;
        src_color_blend_factor = src_alpha;
        dst_color_blend_factor = one_minus_src_alpha;
        color_blend_op = add;
        src_alpha_blend_factor = one;
        dst_alpha_blend_factor = zero;
        alpha_blend_op = add;

    USE_FRAME_HELPERS();

#hlsl
  struct VsOutput
  {
    float4 pos: SV_Position;
  };

  VsOutput vs_main(uint id: SV_VertexID)
  {
    float2 elemPos = GuiScope.pos_size.xy;
    float2 elemSize = GuiScope.pos_size.zw;

    float2 vertices[4] = {
      float2(0.0f, 1.0f),
      float2(0.0f, 0.0f),
      float2(1.0f, 1.0f),
      float2(1.0f, 0.0f)
    };

    float2 pos = vertices[id];
    pos = pos * elemSize + elemPos;
    pos = get_viewport_coords_from_window(pos);

    VsOutput res;
    res.pos = float4(pos, 0.0, 1.0);

    return res;
  }

  float4 ps_main(VsOutput input): SV_Target0
  {
    return GuiScope.color;
  }
#end

  compile(vs_6_1, vs_main);
  compile(ps_6_1, ps_main);
};