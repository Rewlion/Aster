scope FrameScope {
  reserve:
    descriptor_set(0);
    register(sampler, 0-3);
    register(texture, 0);
    register(buffer, 0-10);

  //////////////////// [ RAYTRACING ] /////////////////////////////
  #hlsl
  #include <raytracing/acceleration_structure.hlsl>
  #end
  StructuredBuffer<TLASInstance>          RT_tlasInstances       = extern (RT_tlasInstances);
  StructuredBuffer<BVHNode>               RT_tlasBvhNodes        = extern (RT_tlasBvhNodes);
  StructuredBuffer<uint>                  RT_tlasPrimitiveIds    = extern (RT_tlasPrimitiveIds);
  StructuredBuffer<GeometryMeta>          RT_blasGeometryMeta    = extern (RT_blasGeometryMeta);
  StructuredBuffer<BVHNode>               RT_blasBvhNodes        = extern (RT_blasBvhNodes);
  StructuredBuffer<uint>                  RT_blasPrimitiveIds    = extern (RT_blasPrimitiveIds);
  StructuredBuffer<float4>                RT_blasVertices        = extern (RT_blasVertices);
  StructuredBuffer<TriangleVertexPayload> RT_blasVerticesPayload = extern (RT_blasVerticesPayload);
  ///////////////
  Texture2D<float4> bindlessModelTextures[] = extern(bindlessModelTextures);
  StructuredBuffer<uint> tlasInstanceToBindlessPackId = extern(tlasInstanceToBindlessPackId);

  sampler modelSampler = extern(model_sampler);
  sampler pointClampSampler = extern(point_clamp_sampler);
  sampler linearClampSampler = extern(linear_clamp_sampler);
  sampler cubicClampSampler = extern(cubic_clamp_sampler);
  TextureCube enviMap = extern(envi_map);

  float2 cameraPrevJitter = extern(cameraPrevJitter);
  float2 cameraJitter = extern(cameraJitter);
  float2 cameraSumJitter = extern(cameraSumJitter);
  float4x4 prevViewProj = extern(prev_view_proj);
  float4x4 viewProj = extern(view_proj);
  float4x4 invViewProj = extern(inv_view_proj);
  float4x4 view = extern(view);
  float4x4 proj = extern(proj);
  float3 cameraPos = extern(camera_pos);

  //vectors from camera origin to far plane points in world space
  float3 ltView_WS = extern(ltView_WS);
  float3 rtView_WS = extern(rtView_WS);
  float3 lbView_WS = extern(lbView_WS);
  float3 rbView_WS = extern(rbView_WS);
  float3 ltView_prev_WS = extern(ltView_prev_WS);
  float3 rtView_prev_WS = extern(rtView_prev_WS);
  float3 lbView_prev_WS = extern(lbView_prev_WS);
  float3 rbView_prev_WS = extern(rbView_prev_WS);
  //same for view space
  float3 ltView_VS = extern(ltView_VS);
  float3 rtView_VS = extern(rtView_VS);
  float3 lbView_VS = extern(lbView_VS);
  float3 rbView_VS = extern(rbView_VS);

  float2 zNear_zFar = extern(zNear_zFar);

  uint iFrame = extern(iFrame);
  float secSinceStart = extern(sec_since_start);
  float2 viewPortSize = extern(viewport_size);
};

technique_macro USE_RT {
  #hlsl
  #include "bindless_material_ids.hlsl"

  RTAccelerationStructure initRTAS()
  {
    RTAccelerationStructure rtas;
    rtas.init(
      RT_tlasInstances,
      RT_tlasBvhNodes,
      RT_tlasPrimitiveIds,
      RT_blasGeometryMeta,
      RT_blasBvhNodes,
      RT_blasPrimitiveIds,
      RT_blasVertices,
      RT_blasVerticesPayload
    );
    return rtas;
  }
  #end
};

technique_macro USE_FRAME_HELPERS {
  #hlsl
    float2 get_screen_space_coords(float2 viewport_coords)
    {
      return (viewport_coords + float2(0.5f, 0.5f)) / FrameScope.viewPortSize;
    }

    float2 get_viewport_coords_from_window(float2 window_coords)
    {
      return float2(window_coords.x, FrameScope.viewPortSize.y - window_coords.y)
              / FrameScope.viewPortSize * 2.0 - 1.0;
    }

    float3 getFarPlanePointImpl(float3 lt_view_ws, float3 rt_view_ws, float3 lb_view_ws, uint2 tc, uint2 render_size)
    {
      float3 leftRight = rt_view_ws - lt_view_ws;
      float3 topBot = lb_view_ws - lt_view_ws;

      float2 t = float2(tc.xy) / float2(render_size - uint2(1, 1));
      float3 farPlainPoint = lt_view_ws + leftRight * t.x + topBot * t.y;

      return farPlainPoint;
    }

    float3 getFarPlanePoint(uint2 tc, uint2 render_size)
    {
      return getFarPlanePointImpl(FrameScope.ltView_WS, FrameScope.rtView_WS, FrameScope.lbView_WS, tc, render_size );
    }

    float3 getPrevFrameFarPlanePoint(uint2 tc, uint2 render_size)
    {
      return getFarPlanePointImpl(FrameScope.ltView_prev_WS, FrameScope.rtView_prev_WS, FrameScope.lbView_prev_WS, tc, render_size );
    }

    float3 calcWorldPosITM(uint2 tc, uint2 render_size, float depth)
    {
      float2 uv = float2(tc.xy) / render_size;
      uv.y = 1.0 - uv.y;
      uv = uv * 2.0 - 1.0;
      float4 wpos = mul(FrameScope.invViewProj, float4(uv, depth, 1.0));
      return wpos.xyz / wpos.w;
    }
  #end
};
