scope FrameScope {
  reserve:
    descriptor_set(0);
    register(sampler, 0-3);
    register(texture, 0);
    register(buffer, 0);

  sampler modelSampler = extern(model_sampler);
  sampler pointClampSampler = extern(point_clamp_sampler);
  sampler linearClampSampler = extern(linear_clamp_sampler);
  sampler cubicClampSampler = extern(cubic_clamp_sampler);
  TextureCube enviMap = extern(envi_map);

  float2 cameraPrevJitter = extern(cameraPrevJitter);
  float2 cameraJitter = extern(cameraJitter);
  float4x4 prevViewProj = extern(prev_view_proj);
  float4x4 viewProj = extern(view_proj);
  float4x4 view = extern(view);
  float3 cameraPos = extern(camera_pos);

  //vectors from camera origin to far plane points in world space
  float3 ltView_WS = extern(ltView_WS);
  float3 rtView_WS = extern(rtView_WS);
  float3 lbView_WS = extern(lbView_WS);
  float3 rbView_WS = extern(rbView_WS);
  //same for view space
  float3 ltView_VS = extern(ltView_VS);
  float3 rtView_VS = extern(rtView_VS);
  float3 lbView_VS = extern(lbView_VS);
  float3 rbView_VS = extern(rbView_VS);

  float2 zNear_zFar = extern(zNear_zFar);

  float secSinceStart = extern(sec_since_start);
  float2 viewPortSize = extern(viewport_size);
};

technique_macro USE_FRAME_HELPERS {
  #hlsl
    float2 get_screen_space_coords(float2 viewport_coords)
    {
      return (viewport_coords + float2(0.5f, 0.5f)) / FrameScope.viewPortSize;
    }

    float2 get_viewport_coords_from_window(float2 window_coords)
    {
      return float2(window_coords.x, FrameScope.viewPortSize.y - window_coords.y)
              / FrameScope.viewPortSize * 2.0 - 1.0;
    }
  #end
};
