#include "frame.inc.tfx"
#include "color_spaces.inc.tfx"

scope TemporalAccumulationScope
{
  reserve:
    descriptor_set(1);
    register(texture, 0-4);

  Texture2D taInput = extern(taInput);
  RWTexture2D<float4> taOutput = extern(taOutput);
  Texture2D taHistory = extern(taHistory);
  Texture2D motionBuf = extern(motionBuf);
  Texture2D gbufferDepth = extern(gbuffer_depth);
};

technique TemporalAccumulation
{
  activate scope TemporalAccumulationScope;
  support scope FrameScope;
  
  USE_COLOR_SPACES();

  #hlsl
  [numthreads(8,8,1)]
  void cs_main(uint3 dispatch_thread_id : SV_DispatchThreadID)
  {
    uint2 texSize;
    taInput.GetDimensions(texSize.x, texSize.y);

    uint3 tc = uint3(dispatch_thread_id.xy, 0);
    float2 uv = float2(tc.xy) / float2(texSize-1);

    if (any(tc.xy >= texSize))
      return;

    float3 bbMin = float3(1e3,1e3,1e3);
    float3 bbMax = float3(-1e3,-1e3,-1e3);
    float closestDepth = 1000.0;
    float3 closestNeighborTC = float3(0,0,0);

    [UNROLL]
    for (int i = -1; i <= 1; ++i)
    {
      [UNROLL]
      for (int j = -1; j <= 1; ++j)
      {
        float3 nTC = float3(float2(tc.xy) + float2(i,j), 0);
        nTC = clamp(nTC, 0.0, float3(texSize - 1.0, 0.0));

        float nDepth = gbufferDepth.Load(nTC).r;
        if (nDepth < closestDepth)
        {
          closestDepth = nDepth;
          closestNeighborTC = nTC;
        }

        float3 nColor = RGB2YCbCR(max(0.0, taInput.Load(nTC).rgb));
        bbMin = min(nColor, bbMin);
        bbMax = max(nColor, bbMax);
      }
    }

    float2 motionVec = motionBuf.Load(closestNeighborTC).rg * float2(0.5, -0.5);
    float3 curPixel = RGB2YCbCR(taInput.Load(tc).rgb);
    float2 historyUVReprojected = uv - motionVec;

    if (any(historyUVReprojected != saturate(historyUVReprojected)))
    {
      taOutput[tc.xy] = float4(YCbCr2RGB(curPixel), 1.0);
      return;
    }

    float3 historyPixel = RGB2YCbCR(taHistory.SampleLevel(linearClampSampler,historyUVReprojected, 0).rgb);
    historyPixel = clamp(historyPixel, bbMin, bbMax);

    float w = 0.90;
    float3 res = YCbCr2RGB(lerp(curPixel, historyPixel, w));
    taOutput[tc.xy] = float4(res, 1.0);
  }
  #end

  compile(cs, cs_main);
};