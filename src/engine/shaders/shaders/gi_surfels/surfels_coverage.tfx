#include <depth.inc.tfx>

scope GIBS_SurfelsCoverageScope
{
  reserve:
    descriptor_set(1);
    register(buffer, 0-1);
    register(texture, 0-1);

  #hlsl
  #include "surfel.hlsl"
  #end

  Texture2D gbufferDepth = extern(gbuffer_depth);
  RWTexture2D<uint> surfelsCoverage = extern(surfelsCoverage);
  StructuredBuffer<SurfelData> surfelsStorage = extern(surfelsStorage);
  StructuredBuffer<uint> surfelsSpatialStorage = extern(surfelsSpatialStorage);
};

technique GIBS_SurfelsCoverage
{
  support scope FrameScope;
  activate scope GIBS_SurfelsCoverageScope;

  USE_DEPTH_UTILS();

  #hlsl
  #include "spatial_storage.hlsl"

  [numthreads(8,8,1)]
  void cs_main(uint3 dispatch_thread_id : SV_DispatchThreadID)
  {
    uint2 renderSize;
    gbufferDepth.GetDimensions(renderSize.x, renderSize.y);

    if (any(dispatch_thread_id.xy >= renderSize))
      return;

    uint3 tc = uint3(dispatch_thread_id.xy, 0);
    float depth = gbufferDepth.Load(tc).r;
    if (depth == 0)
      return;

    float3 leftRight = FrameScope.rtView_WS - FrameScope.ltView_WS;
    float3 topBot = FrameScope.lbView_WS - FrameScope.ltView_WS;

    float2 t = float2(tc.xy) / float2(renderSize - uint2(1, 1));
    float3 farPlainPoint = FrameScope.ltView_WS + leftRight * t.x + topBot * t.y;

    float3 worldPos = calcWorldPos(FrameScope.cameraPos, farPlainPoint, depth, FrameScope.zNear_zFar.x, FrameScope.zNear_zFar.y);
    float3 cameraToWorldPos = worldPos - FrameScope.cameraPos;

    ROSpatialStorage st = {surfelsSpatialStorage, FrameScope.zNear_zFar.x};
    uint coverage = st.calcCoverageForPos(worldPos, cameraToWorldPos, surfelsStorage);

    surfelsCoverage[tc.xy] = coverage;
  }
  #end

  compile(cs, cs_main);
};