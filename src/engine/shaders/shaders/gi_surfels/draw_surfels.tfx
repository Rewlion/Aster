#include <screen_space.inc.tfx>
#include <depth.inc.tfx>

scope GIBS_DrawSurfelsScope
{
  reserve:
    descriptor_set(1);
    register(buffer, 0-4);
    register(texture, 0);

  #hlsl
  #include "surfel.hlsl"
  #include "meta.hlsl"
  #end

  Texture2D gbufferDepth = extern(gbuffer_depth);
  StructuredBuffer<SurfelData> surfelsStorage = extern(surfelsStorage);
  StructuredBuffer<uint> surfelsSpatialStorage = extern(surfelsSpatialStorage);
  StructuredBuffer<SurfelsMeta> surfelsMeta = extern(surfelsMeta);
  StructuredBuffer<int> surfelsRayBudget = extern(surfelsRayBudget);

  uint showSurfelsCoverage = extern(showSurfelsCoverage);
  uint showSurfelSDF = extern(showSurfelSDF);
  uint showCellsCoverage = extern(showCellsCoverage);
  uint showCells = extern(showCells);
  uint showAllocPlace = extern(showAllocPlace);
  uint showIrradiance = extern(showSurfelsIrradiance);
};

technique GIBS_DrawSurfels
{
  support scope FrameScope;
  activate scope GIBS_DrawSurfelsScope;

  USE_SCREENSPACE_BASE();
  USE_DEPTH_UTILS();

  #hlsl

  float3 jodieReinhardTonemap(float3 c)
  {
    // From: https://www.shadertoy.com/view/tdSXzD
    float l = dot(c, float3(0.2126, 0.7152, 0.0722));
    float3 tc = c / (c + 1.0);
    return lerp(c / (l + 1.0), tc, tc);
  }

  float3 tonemap(float3 L)
  {
    float exposure = exp2(4.0);
    
    L *= 20.0;
    L = pow(L, float3(1.3, 1.3, 1.3));
    L = jodieReinhardTonemap(L);
    float g = 1.0/2.2;
    L = pow(L, float3(g,g,g));

    return L;
  }

  #include "spatial_storage.hlsl"

  struct IrradianceCollector
  {
    bool found;
    float3 irradiance;
    float3 wpos;

    void init(float3 world_pos)
    {
      wpos = world_pos;
      found = false;
      irradiance = float3(0,0,0);
    }

    void onSurfel(uint surfel_id)
    {
      SurfelData surfel = surfelsStorage[surfel_id];
      float dl = length(surfel.pos - wpos);
      if (dl - surfel.radius <= 0)
      {
        irradiance = surfel.irradiance;
        found = true;
      }
    }

    bool finish()
    {
      return found;
    }
  };

  struct ShowEstimator
  {
    bool found;
    float3 irradiance;
    float3 wpos;

    void init(float3 world_pos)
    {
      wpos = world_pos;
      found = false;
      irradiance = float3(0,0,0);
    }

    void onSurfel(uint surfel_id)
    {
      SurfelData surfel = surfelsStorage[surfel_id];
      float dl = length(surfel.pos - wpos);
      if (dl - surfel.radius <= 0)
      {
        irradiance = surfel.estimatorData.inconsistency.xxx;
        found = true;
      }
    }

    bool finish()
    {
      return found;
    }
  };

  float4 ps_main(VsOutput input) : SV_Target0
  {
    uint3 tc = uint3(input.pos.xy, 0);
    uint2 renderSize;
    gbufferDepth.GetDimensions(renderSize.x, renderSize.y);

    float2 uv = (input.pos.xy + 0.5.xx) / float2(renderSize);
    if (uv.y > 0.90 && uv.y < 0.95)
    {
      int freeRayBudget = max(0, surfelsRayBudget[0]);
      float sizeBorder = (SURFEL_RAY_BUDGET - freeRayBudget) / float(SURFEL_RAY_BUDGET);
      if (uv.x <= sizeBorder)
        return float4(0.0, 1.0, 0.0, 1.0);
      else
        return float4(0.0, 0.0, 0.0, 1.0);
    }
    else if (uv.y > 0.95)
    {
      SurfelsMeta meta = surfelsMeta[0];
      float sizeBorder = (float)meta.allocatedSurfelsCount / SURFEL_COUNT_TOTAL;
      if (uv.x <= sizeBorder)
        return float4(1.0, 0.0, 1.0, 1.0);
      else
        return float4(0.0, 0.0, 0.0, 1.0);
    }

    float depth = gbufferDepth.Load(tc).r;
    
    if (depth == 0)
      return 0.0.xxxx;
    
    float3 leftRight = FrameScope.rtView_WS - FrameScope.ltView_WS;
    float3 topBot = FrameScope.lbView_WS - FrameScope.ltView_WS;

    float2 t = float2(tc.xy) / float2(renderSize - uint2(1, 1));
    float3 farPlainPoint = FrameScope.ltView_WS + leftRight * t.x + topBot * t.y;

    float3 worldPos = calcWorldPos(FrameScope.cameraPos, farPlainPoint, depth, FrameScope.zNear_zFar.x, FrameScope.zNear_zFar.y);
    float3 cameraToWorldPos = worldPos - FrameScope.cameraPos;

    ROSpatialStorage st = {surfelsSpatialStorage, FrameScope.zNear_zFar.x};

    float4 color;
    if (GIBS_DrawSurfelsScope.showSurfelsCoverage)
      color = st.drawSurfelsCoverage(worldPos, cameraToWorldPos, surfelsStorage);
    else if (GIBS_DrawSurfelsScope.showSurfelSDF)
      color = st.drawSurfelsSDF(worldPos, cameraToWorldPos, surfelsStorage);
    else if (GIBS_DrawSurfelsScope.showCellsCoverage)
      color = st.drawCellsCoverage(worldPos, cameraToWorldPos, surfelsStorage);
    else if (GIBS_DrawSurfelsScope.showCells)
      color = st.drawCells(worldPos, cameraToWorldPos);
    else if (GIBS_DrawSurfelsScope.showIrradiance)
    {
      //ShowEstimator ic; ic.init(worldPos);
      IrradianceCollector ic; ic.init(worldPos);
      st.forEachSurfelInCell(worldPos, cameraToWorldPos, ic);
      color = float4(tonemap(ic.irradiance), 1.0);
    }
    else
      color = st.drawSurfels(worldPos, cameraToWorldPos, surfelsStorage);

    return color;
  }
  #end

  compile(vs, vs_main);
  compile(ps, ps_main);
};