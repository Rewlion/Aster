#include "atmosphere/atmosphere.inc.tfx"
#include "atmosphere/sph.inc.tfx"
#include "color_spaces.inc.tfx"
#include "depth.inc.tfx"
#include "frame.inc.tfx"
#include "materials.inc.tfx"
#include "math.inc.tfx"
#include "noise.inc.tfx"
#include "pbr.inc.tfx"
#include "screen_space.inc.tfx"

scope ResolveGbufferScope {
  reserve:
    descriptor_set(2);
    register(buffer, 0-5);
    register(texture, 0-10);

  RWStructuredBuffer<float3> atmParamsBuffer = extern(atmParamsBuffer);
  
  RWTexture2D<float4> resolveTarget = extern(resolveTarget);
  Texture2D gbufferAlbedo = extern(gbuffer_albedo);
  Texture2D gbufferNormal = extern(gbuffer_normal);
  Texture2D gbufferMetalRoughness = extern(gbuffer_metal_roughness);
  Texture2D gbufferDepth = extern(gbuffer_depth);

  //SSSR
  Texture2D specularLight = extern(specularLight);

  #hlsl
  #include "clustered_light/utils.hlsl"
  #end

  //Clustered light
  StructuredBuffer<Light> lightBuffer = extern(clustersLightBuffer);
  StructuredBuffer<ClusterInfo> clustersInfoBuffer = extern(clustersInfoBuffer);
  StructuredBuffer<ClusterIndirection> indirectionBuffer = extern(clustersIndirectionBuffer);

  //GI
  Texture2D indirectLight = extern(indirectLight);

  /////////
  Texture2D shadowMap = extern(shadowMap);
  float4x4 shadowMap_viewProjTm = extern(shadowMap_viewProjTm);
};

technique ResolveGbuffer {
  activate scope ResolveGbufferScope;
  support scope FrameScope;

  render_state:
    primitive_topology = triangle_strip;
    depth:
     test = no;
     write = no;

  USE_MATH();
  #hlsl
  #include "atmosphere/sph.hlsl"
  #end
  USE_ATMOSPHERE_PARAMS();
  USE_ATM_SPH();

  USE_DEPTH_UTILS();
  USE_PBR();
  USE_MATERIALS_UNPACKING();
  USE_NOISE();

  #hlsl
    #include "clustered_light/lights_apply.hlsl"
    
    float staticShadowPCF(float3 world_pos)
    {
      float3 projected = mul(ResolveGbufferScope.shadowMap_viewProjTm, float4(world_pos, 1)).rgb;
      float2 uv = projected.xy * 0.5 + 0.5;
      uv.y = 1.0 - uv.y;

      float2 shadowMapSize;
      shadowMap.GetDimensions(shadowMapSize.x, shadowMapSize.y);

      float2 texelSize = 1.0.xx / shadowMapSize;
      float pcf = 0.0;

      const int kernelSize = 2;
      for (int y = -kernelSize; y <= kernelSize; ++y)
        for (int x = -kernelSize; x <= kernelSize; ++x)
        {
          float2 texel = float2(x,y) + 0.5;
          float2 random = random_pcg3d(uint3(x,y,0)).xy - 0.5;
          float2 jitteredTexel = texel + random;
          float2 jitteredUV = jitteredTexel * texelSize;
          float2 warpedUVOffset = texelSize*jitteredTexel.y * float2(
            cos(2.0 * PI * jitteredTexel.x),
            sin(2.0 * PI * jitteredTexel.x)
          );

          float2 sampleUV = uv + warpedUVOffset;

          float sunDepth = shadowMap.SampleLevel(linearClampSampler, sampleUV, 0).r;
          float bias = 0.0001;
          pcf += sunDepth < projected.z+bias ? 1.0 : 0.0;
        }

      float totalSamples = float( (kernelSize*2+1) * (kernelSize*2+1) );
      return pcf / totalSamples;
    }

    float staticShadow(float3 world_pos)
    {
      return staticShadowPCF(world_pos);
    }

    [numthreads(8, 8, 1)]
    void cs_main(uint3 dispatch_thread_id: SV_DispatchThreadID)
    {
      uint2 renderSize;
      resolveTarget.GetDimensions(renderSize.x, renderSize.y);

      if (any(dispatch_thread_id.xy >= renderSize))
        return;

      uint3 tc = dispatch_thread_id;
      float depth = gbufferDepth.Load(tc).r;

      if (depth == 0.0)
        return;

      float3 leftRight = FrameScope.rtView_WS - FrameScope.ltView_WS;
      float3 topBot = FrameScope.lbView_WS - FrameScope.ltView_WS;

      float2 t = float2(tc.xy) / float2(renderSize - uint2(1, 1));
      float3 farPlainPoint = FrameScope.ltView_WS + leftRight * t.x + topBot * t.y;
      float3 viewDir = normalize(farPlainPoint);

      ProcessedMaterial mat = processMaterial(unpackMaterial(tc));

      float3 worldPos = calcWorldPos(FrameScope.cameraPos, farPlainPoint, depth, FrameScope.zNear_zFar.x, FrameScope.zNear_zFar.y);

      float3 N = mat.normal;
      float3 L = getAtmSunDir();
      float3 V = normalize(FrameScope.cameraPos - worldPos);
      float3 H = normalize(L+V);
      float3 R = reflect(-V,N);

      float NoL = max(dot(L, N), 0.0);
      float NoV = max(dot(V,N), 0.0);
      float VoH = max(dot(V,H), 0.0);
      float NoH = max(dot(N,H), 0.0);

      DynamicLightsApplyParams dynamicLightParams;
      dynamicLightParams.tc = tc.xy;
      dynamicLightParams.renderSize = renderSize;
      dynamicLightParams.worldPos = worldPos;
      dynamicLightParams.N = N;
      dynamicLightParams.NoV = NoV;
      dynamicLightParams.NoH = NoH;
      dynamicLightParams.VoH = VoH;
      dynamicLightParams.zView = linearize_z(depth, FrameScope.zNear_zFar.x, FrameScope.zNear_zFar.y);
      dynamicLightParams.zNear = FrameScope.zNear_zFar.x;
      dynamicLightParams.zFar = FrameScope.zNear_zFar.y;
      dynamicLightParams.roughness = mat.roughness;
      dynamicLightParams.ggxAlpha = mat.ggxAlpha;
      dynamicLightParams.specularReflection = mat.specularReflection;
      dynamicLightParams.clustersInfoBuffer = clustersInfoBuffer;
      dynamicLightParams.indirectionBuffer = indirectionBuffer;
      dynamicLightParams.lightBuffer = lightBuffer;

      float3 dynamicLightsDiffuseNoBRDF;
      float3 dynamicLightsSpecular;
      dynamicLights(dynamicLightParams, dynamicLightsDiffuseNoBRDF, dynamicLightsSpecular);

      float shadow = staticShadow(worldPos);

      float3 diffuseSPH = getSphDiffuseProbe(N);
      float3 sunL = getSunL() * NoL * shadow;

      float3 diffuseGI = indirectLight.Load(tc).rgb;
      //float3 diffusePart = diffuseBRDF(mat.diffuseColor, mat.specularReflection, VoH) * (sunL + dynamicLightsDiffuseNoBRDF);
      float3 diffusePart = diffuseBRDF(mat.diffuseColor, mat.specularReflection, VoH) * (diffuseGI + dynamicLightsDiffuseNoBRDF + sunL);
      float3 specularPart = specularLight.Load(tc).rgb;

      float3 Lo = diffusePart + specularPart;

      Lo = diffusePart;


      resolveTarget[tc.xy] = float4(Lo, 1.0);
    }
  #end

  compile(cs, cs_main);
};