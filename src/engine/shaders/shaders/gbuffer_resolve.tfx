#include "atmosphere/atmosphere.inc.tfx"
#include "atmosphere/envi.inc.tfx"
#include "atmosphere/sph.inc.tfx"
#include "depth.inc.tfx"
#include "frame.inc.tfx"
#include "materials.inc.tfx"
#include "math.inc.tfx"
#include "pbr.inc.tfx"
#include "screen_space.inc.tfx"

scope ResolveGbufferScope {
  reserve:
    descriptor_set(3);
    register(buffer, 0-4);
    register(texture, 0-8);

  RWStructuredBuffer<float3> atmParamsBuffer = extern(atmParamsBuffer);

  RWTexture2D<float4> resolveTarget = extern(resolveTarget);
  Texture2D gbufferAlbedo = extern(gbuffer_albedo);
  Texture2D gbufferNormal = extern(gbuffer_normal);
  Texture2D gbufferMetalRoughness = extern(gbuffer_metal_roughness);
  Texture2D gbufferDepth = extern(gbuffer_depth);
  Texture2D enviSpecular = extern(enviSpecular);
  Texture2D enviBRDF = extern(enviBRDF);
  Texture2D prevPostProcessInput = extern(prevPostProcessInput);
  Texture2D motionBuf = extern(motionBuf);

  #hlsl
  #include "clustered_light/utils.hlsl"
  #end

  StructuredBuffer<Light> lightBuffer = extern(clustersLightBuffer);
  StructuredBuffer<ClusterInfo> clustersInfoBuffer = extern(clustersInfoBuffer);
  StructuredBuffer<ClusterIndirection> indirectionBuffer = extern(clustersIndirectionBuffer);

  float enviMips = extern(enviMips);
  float4 sunAzimuth_sunAltitude_rTopMM_rBotMM = channel(sunAzimuth_sunAltitude_rTopMM_rBotMM);
};

technique ResolveGbuffer {
  activate scope ResolveGbufferScope;
  support scope FrameScope;

  render_state:
    primitive_topology = triangle_strip;
    depth:
     test = no;
     write = no;

  USE_MATH();
  #hlsl
  #include "atmosphere/sph.hlsl"
  #end
  USE_ATMOSPHERE_PARAMS();
  USE_ATM_SPH();

  USE_ENVI_IBL();
  USE_MATERIALS_UNPACKING();
  USE_DEPTH_UTILS();
  USE_PBR();

  #hlsl
    #include "clustered_light/lights_apply.hlsl"

    #define SSR_MAX_STEPS 250
    #define SSR_MAX_DISTANCE 60.0

    float3 ssr(float3 view_dir, float3 R, float3 worldPos, float2 screen_size)
    {
      float cameraFacingReflectionAttenuation = 1 - smoothstep(0.25, 0.5, dot(-view_dir, R));
      if (cameraFacingReflectionAttenuation <= 0)
        return float3(0,0,0);

      float maxDist = 5.0;
      float3 endWorldPos = worldPos + R*maxDist;

      float4 beginVS = mul(FrameScope.view, float4(worldPos, 1));
      if (beginVS.z >= SSR_MAX_DISTANCE)
        return float3(0,0,0);

      float4 beginSS = mul(FrameScope.viewProj, float4(worldPos, 1));
      beginSS.xyz /= beginSS.w;
      beginSS.xy = beginSS.xy * float2(0.5, -0.5) + 0.5;

      float4 endSS = mul(FrameScope.viewProj, float4(endWorldPos, 1));
      endSS.xyz /= endSS.w;
      endSS.xy = endSS.xy * float2(0.5, -0.5) + 0.5;

      float2 deltaPixels = (beginSS.xy -  endSS.xy) * screen_size ;
      uint maxDeltaPixels = max(max(abs(deltaPixels.x), abs(deltaPixels.y)), 1);

      float3 rayInc = (endSS.xyz - beginSS.xyz) / maxDeltaPixels;
      float3 raySample = beginSS.xyz;
      float thickness = max(abs(rayInc.z) * 2, 0.00005);
      bool found = false;
      for (uint i = 0; i < SSR_MAX_STEPS; ++i)
      {
        raySample = raySample + rayInc;
        if (raySample.x < 0 || raySample.x > 1 || raySample.y < 0 || raySample.y > 1)
          break;

        float3 sampleNormal = unpackNormal(gbufferNormal.SampleLevel(pointClampSampler, raySample.xy, 0).rgb);
        float sceneDepth = gbufferDepth.SampleLevel(pointClampSampler, raySample.xy, 0).r;
        float zDelta = sceneDepth - raySample.z;

        if (dot(sampleNormal, R) < 0.001  && sceneDepth > 0 && zDelta >= 0 && zDelta <= thickness && sceneDepth < beginSS.z && sceneDepth > endSS.z)
        {
          found = true;
          break;
        }
      }

      if (!found)
        return float3(0.0, 0.0, 0.0);

      uint3 tc = uint3((uint2)(raySample.xy * screen_size), 0);
      float2 motionVec = motionBuf.Load(tc).rg * float2(0.5, -0.5);
      float3 reflection = prevPostProcessInput.SampleLevel(linearClampSampler, raySample.xy - motionVec, 0).rgb;
      return reflection;
    }

    [numthreads(TILE_DIM_X, TILE_DIM_Y, 1)]
    void cs_main(uint3 dispatch_thread_id: SV_DispatchThreadID)
    {
      uint2 renderSize;
      resolveTarget.GetDimensions(renderSize.x, renderSize.y);

      if (any(dispatch_thread_id.xy >= renderSize))
        return;

      uint3 tc = dispatch_thread_id;
      float depth = gbufferDepth.Load(tc).r;

      if (depth == 0.0)
        return;

      float3 leftRight = FrameScope.rtView_WS - FrameScope.ltView_WS;
      float3 topBot = FrameScope.lbView_WS - FrameScope.ltView_WS;

      float2 t = float2(tc.xy) / float2(renderSize - uint2(1, 1));
      float3 farPlainPoint = FrameScope.ltView_WS + leftRight * t.x + topBot * t.y;
      float3 viewDir = normalize(farPlainPoint);

      ProcessedMaterial mat = processMaterial(unpackMaterial(tc));

      float3 worldPos = calcWorldPos(FrameScope.cameraPos, farPlainPoint, depth, FrameScope.zNear_zFar.x, FrameScope.zNear_zFar.y);

      float3 N = mat.normal;
      float3 L = getAtmSunDir();
      float3 V = normalize(FrameScope.cameraPos - worldPos);
      float3 H = normalize(L+V);
      float3 R = reflect(-V,N);

      float NoL = max(dot(L, N), 0.0);
      float NoV = max(dot(V,N), 0.0);
      float VoH = max(dot(V,H), 0.0);
      float NoH = max(dot(N,H), 0.0);

      DynamicLightsApplyParams dynamicLightParams;
      dynamicLightParams.tc = tc.xy;
      dynamicLightParams.renderSize = renderSize;
      dynamicLightParams.worldPos = worldPos;
      dynamicLightParams.N = N;
      dynamicLightParams.NoV = NoV;
      dynamicLightParams.NoH = NoH;
      dynamicLightParams.VoH = VoH;
      dynamicLightParams.zView = linearize_z(depth, FrameScope.zNear_zFar.x, FrameScope.zNear_zFar.y);
      dynamicLightParams.zNear = FrameScope.zNear_zFar.x;
      dynamicLightParams.zFar = FrameScope.zNear_zFar.y;
      dynamicLightParams.roughness = mat.roughness;
      dynamicLightParams.ggxAlpha = mat.ggxAlpha;
      dynamicLightParams.specularReflection = mat.specularReflection;
      dynamicLightParams.clustersInfoBuffer = clustersInfoBuffer;
      dynamicLightParams.indirectionBuffer = indirectionBuffer;
      dynamicLightParams.lightBuffer = lightBuffer;

      float3 dynamicLightsDiffuseNoBRDF;
      float3 dynamicLightsSpecular;
      dynamicLights(dynamicLightParams, dynamicLightsDiffuseNoBRDF, dynamicLightsSpecular);

      float3 diffuseSPH = getSphDiffuseProbe(N);
      float3 sunL = getSunL() * NoL;

      float3 diffusePart = diffuseBRDF(mat.diffuseColor, mat.specularReflection, VoH) * (diffuseSPH + sunL + dynamicLightsDiffuseNoBRDF);

      float3 ssrPart = ssr(viewDir, reflect(viewDir, N), worldPos, float2(renderSize));
      float3 specularPart = ssrPart;

      float3 Lo = diffusePart + specularPart;
      
      resolveTarget[tc.xy] = float4(Lo, 1.0);
    }
  #end

  compile(cs, cs_main);
};