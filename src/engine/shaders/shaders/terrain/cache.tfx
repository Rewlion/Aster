#include "../screen_space.inc.tfx"
#include "../frame.inc.tfx"
#include "virtual_texture.tfx"

scope TerrainTileScope
{
  reserve:
    descriptor_set(2);
    register(texture, 0);
    register(buffer, 0);

  Texture2D terrainDetailAlbedo = channel(terrainDetailAlbedo);
  float terrainDetailSize = channel(terrainDetailSize);
  float terrainSize = channel(terrainSize);

  uint packedVTile = extern(packedVTile);
  uint packedPTile = extern(packedPTile);
};

technique TerrainTile
{
  support scope FrameScope;
  support scope VTexParamsScope;
  support scope TerrainTileScope;

  USE_SCREENSPACE_BASE();

  USE_VTEX_UNPACK();

  #hlsl
  float3 ps_main(VsOutput input) : SV_Target0
  {
    uint2 vtile; uint vtileMip;
    unpack_vtile(TerrainTileScope.packedVTile, vtile, vtileMip);
    uint2 ptile = unpack_ptile(TerrainTileScope.packedPTile);

    float2 tileTC = input.pos.xy - float2(0.5,0.5) - ptile * VTexParamsScope.tileSize;
    float worldTexel = (VTexParamsScope.texelSize * ( 1u << vtileMip));
    float2 tileWorldPos = worldTexel * tileTC;
    float2 vtileWorldPosOrigin = (vtile * VTexParamsScope.tileSize) * worldTexel;

    float2 worldPos = vtileWorldPosOrigin + tileWorldPos - float2(TerrainTileScope.terrainSize, TerrainTileScope.terrainSize)*0.5;
    float2 uv = worldPos / (TerrainTileScope.terrainDetailSize * VTexParamsScope.texelSize);
    
    float3 albedo = terrainDetailAlbedo.Sample(modelSampler, uv).rgb;
    return albedo;
  }
  #end

  compile(ps, ps_main);
  compile(vs, vs_main);
};