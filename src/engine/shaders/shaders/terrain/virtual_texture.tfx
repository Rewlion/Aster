#include "tile.inc.tfx"

scope VTexParamsScope
{
  reserve:
    descriptor_set(1);
    register(buffer, 0);
    register(texture, 0-1);

  float vtexSize = extern(VTexSize);
  float maxMip = extern(VTexMaxMip);
  uint tileSize = extern(VTileSize);
  float tileStorageSize = extern(VTileStorageSize);
  uint indirectionSize = extern(VTexIndirectionSize);
  float texelSize = extern(VTexelSize);
};

scope VTexSampleScope
{
  reserve:
    descriptor_set(1);
    register(texture, 0-1);

  Texture2D tileStorage = extern(VTexTileStorage);
  Texture2D<uint> indirection = extern(VTexIndirection);
};

scope VTexIndirectionUpdateScope
{
  reserve:
    descriptor_set(1);
    register(texture, 0);
    register(buffer, 0-1);

  RWStructuredBuffer<uint4> updateBuffer = extern(vtexUpdateBuffer);
  RWTexture2D<uint> indirectionTex = extern(vtexIndirectionTex);
  uint updateCount = extern(vtexUpdateCount);
};

technique VTexIndirectionUpdate
{
  support scope VTexIndirectionUpdateScope;

  USE_VTEX_UNPACK();

  #hlsl
  [numthreads(64,1,1)]
  void main_cs(uint3 id: SV_DispatchThreadID)
  {
    if (id.x < VTexIndirectionUpdateScope.updateCount)
    {
      uint2 packedVTilePTile = updateBuffer[id.x].rg;
      uint2 vtile; uint mip;
      unpack_vtile(packedVTilePTile.x, vtile, mip);

      indirectionTex[vtile] = packedVTilePTile.y;
    }
  }
  #end

  compile(cs, main_cs);
};
