#include "frame.inc.tfx"
#include "mesh.inc.tfx"
#include "materials.inc.tfx"

scope TestStaticMeshScope {
  reserve:
    descriptor_set(2);
    register(buffer, 0);
    register(texture, 0-2);

  float roughness = channel(roughness);
  float metal = channel(metal);
};

technique TestStaticMesh {
  support scope FrameScope;
  support scope StaticModelScope;
  activate scope TestStaticMeshScope;

  USE_STATIC_MESH();
  USE_MATERIALS_PACKING();

  #hlsl
    struct VsOutput
    {
      float4 pos: SV_Position;
      float2 uv: TEXTURE0;
      float3 normal: TEXTURE1;
      float4 prevPos : TEXTURE2;
      float4 curPos : TEXTURE3;
    };

    VsOutput vs_main(TestStaticMesh_input input)
    {
      float4x4 mvp = StaticModelScope.viewProjTm;
      float4x4 prevMvp = FrameScope.prevViewProj;
      mvp = mul(mvp, StaticModelScope.modelTm);
      prevMvp = mul(prevMvp, StaticModelScope.modelTm);

      VsOutput output;
      output.pos = mul(mvp, float4(input.pos, 1.0));
      output.prevPos = mul(prevMvp, float4(input.pos, 1.0));
      output.curPos = output.pos;
      output.uv = input.uv;
      output.normal = normalize(mul(StaticModelScope.normalTm, float4(input.normal, 0.0)).xyz);

      return output;
    }

    PackedMaterial ps_main(VsOutput input)
    {
      float4 albedo = albedoTex.Sample(modelSampler, input.uv);

      UnpackedMaterial mat;
      initAlbedo(mat, albedo.rgb);
      initMetal(mat, TestStaticMeshScope.metal);
      initRoughness(mat, TestStaticMeshScope.roughness);
      initNormal(mat, input.normal);
      initMotionVector(mat, input.prevPos, input.curPos, FrameScope.cameraSumJitter);

      return packMaterial(mat);
    }
  #end

  compile(vs_6_1, vs_main);
  compile(ps_6_1, ps_main);
};
