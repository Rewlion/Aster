// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "dbg_draw_surfels.ecs.cpp" 

using namespace ecs;

//Engine::OnFrameGraphInit handler
static
void mk_fg_node_gibs_draw_surfels(Event*, ComponentsAccessor&)
{
  fg::register_node("gibs_draw_surfels", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    reg.orderMeBefore("gibs_sync_out");
    auto late_opaque_depth = reg.readTexture("late_opaque_depth", gapi::TextureState::DepthReadStencilRead, false);
    auto gibs_surfels_storage_binned = reg.readBuffer("gibs_surfels_storage_binned", gapi::BufferState::BF_STATE_SRV, false);
    auto gibs_surfels_spatial_storage_binned = reg.readBuffer("gibs_surfels_spatial_storage_binned", gapi::BufferState::BF_STATE_SRV, false);
    auto gibs_surfels_meta_binned = reg.readBuffer("gibs_surfels_meta_binned", gapi::BufferState::BF_STATE_SRV, false);
    auto gibs_surfels_ray_budget = reg.readBuffer("gibs_surfels_ray_budget", gapi::BufferState::BF_STATE_SRV, false);
    reg.requestRenderPass()
      .addTarget("gibs_dbg_surfels", gapi::LoadOp::DontCare, gapi::StoreOp::Store, gapi::ClearColorValue{uint32_t{0}})
    ;


    return [late_opaque_depth,gibs_surfels_storage_binned,gibs_surfels_spatial_storage_binned,gibs_surfels_meta_binned,gibs_surfels_ray_budget](gapi::CmdEncoder& encoder)
    {
      tfx::set_extern("gbuffer_depth", late_opaque_depth.get());
      tfx::set_extern("surfelsStorage", gibs_surfels_storage_binned.get());
      tfx::set_extern("surfelsSpatialStorage", gibs_surfels_spatial_storage_binned.get());
      tfx::set_extern("surfelsMeta", gibs_surfels_meta_binned.get());
      tfx::set_extern("surfelsRayBudget", gibs_surfels_ray_budget.get());
      gibs_draw_surfels(encoder);
    };
  });
}

static
EventSystemRegistration mk_fg_node_gibs_draw_surfels_registration(
  mk_fg_node_gibs_draw_surfels,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_gibs_draw_surfels"
);
