// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "surfels_allocate.ecs.cpp" 

using namespace ecs;

//Engine::OnFrameGraphInit handler
static
void mk_fg_node_gibs_allocate_surfels(Event*, ComponentsAccessor&)
{
  fg::register_node("gibs_allocate_surfels", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    const uint2 __renderSize__ = reg.getRenderSize();

    fg::dsl::AccessDecorator render_size{__renderSize__};
    auto gibs_dbg_alloc = reg.modifyTexture("gibs_dbg_alloc", gapi::TextureState::ShaderReadWrite);
    auto gbuf1 = reg.readTexture("gbuf1", gapi::TextureState::ShaderRead, false);
    auto late_opaque_depth = reg.readTexture("late_opaque_depth", gapi::TextureState::DepthReadStencilRead, false);
    auto gibs_surfels_lifetime = reg.modifyBuffer("gibs_surfels_lifetime", gapi::BufferState::BF_STATE_UAV_RW);
    auto gibs_surfels_storage_binned = reg.modifyBuffer("gibs_surfels_storage_binned", gapi::BufferState::BF_STATE_UAV_RW);
    auto gibs_surfels_pool_binned = reg.modifyBuffer("gibs_surfels_pool_binned", gapi::BufferState::BF_STATE_UAV_RW);
    auto gibs_surfels_allocation_locks = reg.modifyBuffer("gibs_surfels_allocation_locks", gapi::BufferState::BF_STATE_UAV_RW);
    auto gibs_surfels_meta_binned = reg.modifyBuffer("gibs_surfels_meta_binned", gapi::BufferState::BF_STATE_UAV_RW);
    auto gibs_surfels_allocation_pos = reg.readTexture("gibs_surfels_allocation_pos", gapi::TextureState::ShaderRead, false);
    auto gibs_rayguiding_map = reg.modifyTexture("gibs_rayguiding_map", gapi::TextureState::ShaderReadWrite);
    reg.orderMeBefore("gbuffer_resolve");

    return [gibs_dbg_alloc,gbuf1,late_opaque_depth,gibs_surfels_lifetime,gibs_surfels_storage_binned,gibs_surfels_pool_binned,gibs_surfels_allocation_locks,gibs_surfels_meta_binned,gibs_surfels_allocation_pos,gibs_rayguiding_map,render_size](gapi::CmdEncoder& encoder)
    {
      tfx::set_extern("dbgTex", gibs_dbg_alloc.get());
      tfx::set_extern("gbuffer_normal", gbuf1.get());
      tfx::set_extern("gbuffer_depth", late_opaque_depth.get());
      tfx::set_extern("surfelsLifeTime", gibs_surfels_lifetime.get());
      tfx::set_extern("surfelsStorage", gibs_surfels_storage_binned.get());
      tfx::set_extern("surfelsPool", gibs_surfels_pool_binned.get());
      tfx::set_extern("surfelsAllocLocks", gibs_surfels_allocation_locks.get());
      tfx::set_extern("surfelsMeta", gibs_surfels_meta_binned.get());
      tfx::set_extern("surfelsAllocPos", gibs_surfels_allocation_pos.get());
      tfx::set_extern("rayguidingMap", gibs_rayguiding_map.get());
      gibs_allocate_surfels(encoder, render_size.get());
    };
  });
}

static
EventSystemRegistration mk_fg_node_gibs_allocate_surfels_registration(
  mk_fg_node_gibs_allocate_surfels,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_gibs_allocate_surfels"
);
