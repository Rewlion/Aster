// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "surfels_acc_irradiance.ecs.cpp" 

using namespace ecs;

//Engine::OnFrameGraphInit handler
static
void mk_fg_node_gibs_surfels_irradiance(Event*, ComponentsAccessor&)
{
  fg::register_node("gibs_surfels_irradiance", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    reg.orderMeBefore("gibs_sync_out");
    auto gibs_surfels_storage_binned = reg.modifyBuffer("gibs_surfels_storage_binned", gapi::BufferState::BF_STATE_UAV_RW);
    auto gibs_surfels_spatial_storage_binned = reg.readBuffer("gibs_surfels_spatial_storage_binned", gapi::BufferState::BF_STATE_SRV, false);
    auto gibs_rayguiding_map = reg.modifyTexture("gibs_rayguiding_map", gapi::TextureState::ShaderReadWrite);
    auto atm_sky_lut_srv = reg.readTexture("atm_sky_lut_srv", gapi::TextureState::ShaderRead, false);
    auto gibs_surfels_lifetime = reg.readBuffer("gibs_surfels_lifetime", gapi::BufferState::BF_STATE_SRV, false);
    auto sph_buf = reg.readBuffer("sph_buf", gapi::BufferState::BF_STATE_SRV, false);

    return [gibs_surfels_storage_binned,gibs_surfels_spatial_storage_binned,gibs_rayguiding_map,atm_sky_lut_srv,gibs_surfels_lifetime,sph_buf](gapi::CmdEncoder& encoder)
    {
      tfx::set_extern("surfelsStorage", gibs_surfels_storage_binned.get());
      tfx::set_extern("surfelsSpatialStorage", gibs_surfels_spatial_storage_binned.get());
      tfx::set_extern("rayguidingMap", gibs_rayguiding_map.get());
      tfx::set_extern("skyLUT", atm_sky_lut_srv.get());
      tfx::set_extern("surfelsLifeTime", gibs_surfels_lifetime.get());
      tfx::set_extern("atmParamsBuffer", sph_buf.get());
      gibs_surfels_irradiance(encoder);
    };
  });
}

static
EventSystemRegistration mk_fg_node_gibs_surfels_irradiance_registration(
  mk_fg_node_gibs_surfels_irradiance,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_gibs_surfels_irradiance"
);
