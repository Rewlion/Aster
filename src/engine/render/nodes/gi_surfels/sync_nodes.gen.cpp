// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "sync_nodes.ecs.cpp" 

using namespace ecs;

//Engine::OnFrameGraphInit handler
static
void mk_fg_node_gibs_binning_sync(Event*, ComponentsAccessor&)
{
  fg::register_node("gibs_binning_sync", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    auto gibs_surfels_storage_binned = reg.renameBuffer("gibs_surfels_storage", "gibs_surfels_storage_binned", gapi::BufferState::BF_STATE_SRV);
    auto gibs_surfels_spatial_storage_binned = reg.renameBuffer("gibs_surfels_spatial_storage", "gibs_surfels_spatial_storage_binned", gapi::BufferState::BF_STATE_SRV);
    auto gibs_surfels_meta_binned = reg.renameBuffer("gibs_surfels_meta", "gibs_surfels_meta_binned", gapi::BufferState::BF_STATE_SRV);
    auto gibs_surfels_pool_binned = reg.renameBuffer("gibs_surfels_pool", "gibs_surfels_pool_binned", gapi::BufferState::BF_STATE_UAV_RW);
    return [](gapi::CmdEncoder&){};
  });
}

static
EventSystemRegistration mk_fg_node_gibs_binning_sync_registration(
  mk_fg_node_gibs_binning_sync,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_gibs_binning_sync"
);


//Engine::OnFrameGraphInit handler
static
void mk_fg_node_gibs_sync_out(Event*, ComponentsAccessor&)
{
  fg::register_node("gibs_sync_out", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    reg.orderMeBefore("gbuffer_resolve");
    return [](gapi::CmdEncoder&){};
  });
}

static
EventSystemRegistration mk_fg_node_gibs_sync_out_registration(
  mk_fg_node_gibs_sync_out,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_gibs_sync_out"
);
