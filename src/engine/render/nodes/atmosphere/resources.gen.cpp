// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "resources.ecs.cpp" 

using namespace ecs;

const static DirectQueryRegistration query_atmosphere_render_state_queryReg{
  {
    DESCRIBE_QUERY_COMPONENT("atmosphere_render_state", AtmosphereRenderState)
  },
  "query_atmosphere_render_state"};
const static query_id_t query_atmosphere_render_state_queryId = query_atmosphere_render_state_queryReg.getId();


void query_atmosphere_render_state (eastl::function<
  void(
    AtmosphereRenderState& atmosphere_render_state)> cb)
{
  ecs::get_registry().query(query_atmosphere_render_state_queryId, [&](ComponentsAccessor& accessor)
  {
    AtmosphereRenderState& atmosphere_render_state = accessor.get<AtmosphereRenderState>(compile_ecs_name_hash("atmosphere_render_state"));
    cb(atmosphere_render_state);
  });
}


const static DirectQueryRegistration query_atmosphere_queryReg{
  {
    DESCRIBE_QUERY_COMPONENT("atmosphere", AtmosphereComponent)
  },
  "query_atmosphere"};
const static query_id_t query_atmosphere_queryId = query_atmosphere_queryReg.getId();


void query_atmosphere (eastl::function<
  void(
    AtmosphereComponent& atmosphere)> cb)
{
  ecs::get_registry().query(query_atmosphere_queryId, [&](ComponentsAccessor& accessor)
  {
    AtmosphereComponent& atmosphere = accessor.get<AtmosphereComponent>(compile_ecs_name_hash("atmosphere"));
    cb(atmosphere);
  });
}


const static DirectQueryRegistration query_sun_queryReg{
  {
    DESCRIBE_QUERY_COMPONENT("sun", SunComponent)
  },
  "query_sun"};
const static query_id_t query_sun_queryId = query_sun_queryReg.getId();


void query_sun (eastl::function<
  void(
    SunComponent& sun)> cb)
{
  ecs::get_registry().query(query_sun_queryId, [&](ComponentsAccessor& accessor)
  {
    SunComponent& sun = accessor.get<SunComponent>(compile_ecs_name_hash("sun"));
    cb(sun);
  });
}


//Engine::OnFrameGraphInit handler
static
void mk_fg_node_atm_resources(Event*, ComponentsAccessor&)
{
  fg::register_node("atm_resources", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    reg.orderMeAfter("frame_preparing");
    auto camera_data = reg.readBlob<Engine::CameraData>("camera_data");
    auto atm_tr_lut = reg.importTextureProducer("atm_tr_lut", GET_ATM(TrLut));
    auto atm_ms_lut = reg.importTextureProducer("atm_ms_lut", GET_ATM(MsLut));
    auto atm_sky_lut = reg.importTextureProducer("atm_sky_lut", GET_ATM(SkyLut));
    auto atm_ap_lut = reg.importTextureProducer("atm_ap_lut", GET_ATM(ApLut));
    auto atm_envi_specular = reg.importTextureProducer("atm_envi_specular", GET_ATM(EnviSpecular));
    auto atm_envi_brdf = reg.importTextureProducer("atm_envi_brdf", GET_ATM(EnviBRDFLut));
    auto atm_envi_mips = reg.createBlob<int>("atm_envi_mips");
    auto sun_azimuth_altitude = reg.createBlob<float2>("sun_azimuth_altitude");

    return [atm_envi_mips,camera_data,sun_azimuth_altitude,atm_envi_specular](gapi::CmdEncoder& encoder)
    {
      atm_resources_exec(encoder, atm_envi_mips.get(), camera_data.get(), sun_azimuth_altitude.get(), atm_envi_specular);
    };
  });
}

static
EventSystemRegistration mk_fg_node_atm_resources_registration(
  mk_fg_node_atm_resources,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_atm_resources"
);
