// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "hi_z.ecs.cpp" 

using namespace ecs;

//Engine::OnFrameGraphInit handler
static
void mk_fg_node_HiZ(Event*, ComponentsAccessor&)
{
  fg::register_node("HiZ", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    const uint2 __renderSize__ = reg.getRenderSize();

    fg::dsl::AccessDecorator render_size{__renderSize__};
    auto late_opaque_depth = reg.readTexture("late_opaque_depth", gapi::TextureState::DepthReadStencilRead, false);

    auto hi_z_buffer = reg.createTexture("hi_z_buffer",
      gapi::TextureAllocationDescription{
        .format =          gapi::TextureFormat::R32_FLOAT,
        .extent =          uint3(__renderSize__, 1),
        .mipLevels =       (uint32_t)std::log2(std::min(__renderSize__.x, __renderSize__.y))+1,
        .arrayLayers =     1,
        .samplesPerPixel = gapi::TextureSamples::s1,
        .usage =           (gapi::TextureUsage)(gapi::TextureUsage::TEX_USAGE_UAV | gapi::TextureUsage::TEX_USAGE_SRV)
      },
      gapi::TextureState::ShaderReadWrite
    );


    return [render_size,late_opaque_depth,hi_z_buffer](gapi::CmdEncoder& encoder)
    {
      hi_z(encoder, render_size.get(), late_opaque_depth.get(), hi_z_buffer);
    };
  });
}

static
EventSystemRegistration mk_fg_node_HiZ_registration(
  mk_fg_node_HiZ,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_HiZ"
);
