// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "post_process.ecs.cpp" 

using namespace ecs;

//Engine::OnFrameGraphInit handler
static
void mk_fg_node_post_process_input_producer(Event*, ComponentsAccessor&)
{
  fg::register_node("post_process_input_producer", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    auto post_process_input = reg.renameTexture("transparent_target", "post_process_input", gapi::TextureState::RenderTarget);
    return [](gapi::CmdEncoder&){};
  });
}

static
EventSystemRegistration mk_fg_node_post_process_input_producer_registration(
  mk_fg_node_post_process_input_producer,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_post_process_input_producer"
);


//Engine::OnFrameGraphInit handler
static
void mk_fg_node_post_process(Event*, ComponentsAccessor&)
{
  fg::register_node("post_process", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    const uint2 __renderSize__ = reg.getRenderSize();

    auto post_process_input = reg.readTexture("post_process_input", gapi::TextureState::ShaderRead, false);
    auto bayer_matrix_8x8 = reg.readTexture("bayer_matrix_8x8", gapi::TextureState::ShaderRead, false);

    auto final_target = reg.createTexture("final_target",
      gapi::TextureAllocationDescription{
        .format =          gapi::TextureFormat::R8G8B8A8_UNORM,
        .extent =          uint3(__renderSize__, 1),
        .mipLevels =       1,
        .arrayLayers =     1,
        .samplesPerPixel = gapi::TextureSamples::s1,
        .usage =           (gapi::TextureUsage)((gapi::TextureUsage)(gapi::TextureUsage::TEX_USAGE_RT | gapi::TextureUsage::TEX_USAGE_SRV) | gapi::TextureUsage::TEX_USAGE_TRANSFER_SRC)
      },
      gapi::TextureState::RenderTarget
    );

    reg.requestRenderPass()
      .addTarget(final_target, gapi::LoadOp::Load, gapi::StoreOp::Store, gapi::ClearColorValue{uint32_t{0}})
    ;


    return [post_process_input,bayer_matrix_8x8](gapi::CmdEncoder& encoder)
    {
      tfx::set_extern("post_process_input", post_process_input.get());
      tfx::set_extern("bayerMatrix8x8", bayer_matrix_8x8.get());
      post_process_exec(encoder);
    };
  });
}

static
EventSystemRegistration mk_fg_node_post_process_registration(
  mk_fg_node_post_process,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_post_process"
);
