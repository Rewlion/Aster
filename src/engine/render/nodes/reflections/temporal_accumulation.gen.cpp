// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "temporal_accumulation.ecs.cpp" 

using namespace ecs;

//Engine::OnFrameGraphInit handler
static
void mk_fg_node_reflections_temporal_acc(Event*, ComponentsAccessor&)
{
  fg::register_node("reflections_temporal_acc", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    const uint2 __renderSize__ = reg.getRenderSize();


    auto reflections_variance = reg.createTexture("reflections_variance",
      gapi::TextureAllocationDescription{
        .format =          gapi::TextureFormat::R32_FLOAT,
        .extent =          uint3(__renderSize__, 1),
        .mipLevels =       1,
        .arrayLayers =     1,
        .samplesPerPixel = gapi::TextureSamples::s1,
        .usage =           (gapi::TextureUsage)(gapi::TextureUsage::TEX_USAGE_UAV | gapi::TextureUsage::TEX_USAGE_SRV)
      },
      gapi::TextureState::ShaderReadWrite
    );


    auto reflections_ta_target = reg.createTexture("reflections_ta_target",
      gapi::TextureAllocationDescription{
        .format =          gapi::TextureFormat::R32G32B32A32_S,
        .extent =          uint3(__renderSize__, 1),
        .mipLevels =       1,
        .arrayLayers =     1,
        .samplesPerPixel = gapi::TextureSamples::s1,
        .usage =           (gapi::TextureUsage)(gapi::TextureUsage::TEX_USAGE_UAV | gapi::TextureUsage::TEX_USAGE_SRV)
      },
      gapi::TextureState::ShaderReadWrite
    );


    auto reflections_ta_history = reg.createTexture("reflections_ta_history",
      gapi::TextureAllocationDescription{
        .format =          gapi::TextureFormat::R32G32B32A32_S,
        .extent =          uint3(__renderSize__, 1),
        .mipLevels =       1,
        .arrayLayers =     1,
        .samplesPerPixel = gapi::TextureSamples::s1,
        .usage =           (gapi::TextureUsage)(gapi::TextureUsage::TEX_USAGE_UAV | gapi::TextureUsage::TEX_USAGE_SRV)
      },
      gapi::TextureState::ShaderReadWrite
    );

    auto reflections_ta_history_prev = reg.readTexture("reflections_ta_history", gapi::TextureState::ShaderRead, fg::Timeline::Previous);
    auto reflections_variance_prev = reg.readTexture("reflections_variance", gapi::TextureState::ShaderRead, fg::Timeline::Previous);
    fg::dsl::AccessDecorator render_size{__renderSize__};
    auto reflections_target = reg.readTexture("reflections_target", gapi::TextureState::ShaderRead, false);
    auto motionBuf = reg.readTexture("motionBuf", gapi::TextureState::ShaderRead, false);
    auto late_opaque_depth = reg.readTexture("late_opaque_depth", gapi::TextureState::DepthReadStencilRead, false);
    auto gbuf1 = reg.readTexture("gbuf1", gapi::TextureState::ShaderRead, false);
    auto late_opaque_depth_prev = reg.readTexture("late_opaque_depth", gapi::TextureState::DepthReadStencilRead, fg::Timeline::Previous);
    auto gbuf1_prev = reg.readTexture("gbuf1", gapi::TextureState::ShaderRead, fg::Timeline::Previous);

    return [reflections_variance,reflections_variance_prev,reflections_ta_target,reflections_ta_history_prev,reflections_target,motionBuf,late_opaque_depth,gbuf1,late_opaque_depth_prev,gbuf1_prev,render_size](gapi::CmdEncoder& encoder)
    {
      tfx::set_extern("varianceOutput", reflections_variance.get());
      tfx::set_extern("varianceHistory", reflections_variance_prev.get());
      tfx::set_extern("taOutput", reflections_ta_target.get());
      tfx::set_extern("taHistory", reflections_ta_history_prev.get());
      tfx::set_extern("inputIrradiance", reflections_target.get());
      tfx::set_extern("motionBuf", motionBuf.get());
      tfx::set_extern("gbuffer_depth", late_opaque_depth.get());
      tfx::set_extern("gbuffer_normal", gbuf1.get());
      tfx::set_extern("gbuffer_depth_prev", late_opaque_depth_prev.get());
      tfx::set_extern("gbuffer_normal_prev", gbuf1_prev.get());
      reflections_temporal_acc(encoder, render_size.get());
    };
  });
}

static
EventSystemRegistration mk_fg_node_reflections_temporal_acc_registration(
  mk_fg_node_reflections_temporal_acc,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_reflections_temporal_acc"
);
