// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "reflections.ecs.cpp" 

using namespace ecs;

//Engine::OnFrameGraphInit handler
static
void mk_fg_node_reflections(Event*, ComponentsAccessor&)
{
  fg::register_node("reflections", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    const uint2 __renderSize__ = reg.getRenderSize();

    fg::dsl::AccessDecorator render_size{__renderSize__};
    auto reflections_target = reg.modifyTexture("reflections_target", gapi::TextureState::ShaderReadWrite);
    auto gbuf0 = reg.readTexture("gbuf0", gapi::TextureState::ShaderRead, false);
    auto gbuf1 = reg.readTexture("gbuf1", gapi::TextureState::ShaderRead, false);
    auto gbuf2 = reg.readTexture("gbuf2", gapi::TextureState::ShaderRead, false);
    auto post_process_input = reg.readTexture("post_process_input", gapi::TextureState::ShaderRead, fg::Timeline::Previous);
    auto motionBuf = reg.readTexture("motionBuf", gapi::TextureState::ShaderRead, false);
    auto late_opaque_depth = reg.readTexture("late_opaque_depth", gapi::TextureState::DepthReadStencilRead, false);
    auto hi_z_buffer = reg.readTexture("hi_z_buffer", gapi::TextureState::ShaderRead, false);
    auto atm_envi_specular_srv = reg.readTexture("atm_envi_specular_srv", gapi::TextureState::ShaderRead, true);
    auto atm_envi_brdf_srv = reg.readTexture("atm_envi_brdf_srv", gapi::TextureState::ShaderRead, true);

    return [reflections_target,gbuf0,gbuf1,gbuf2,post_process_input,motionBuf,late_opaque_depth,hi_z_buffer,atm_envi_specular_srv,atm_envi_brdf_srv,render_size](gapi::CmdEncoder& encoder)
    {
      tfx::set_extern("reflectionsTarget", reflections_target.get());
      tfx::set_extern("gbuffer_albedo", gbuf0.get());
      tfx::set_extern("gbuffer_normal", gbuf1.get());
      tfx::set_extern("gbuffer_metal_roughness", gbuf2.get());
      tfx::set_extern("prevPostProcessInput", post_process_input.get());
      tfx::set_extern("motionBuf", motionBuf.get());
      tfx::set_extern("gbuffer_depth", late_opaque_depth.get());
      tfx::set_extern("hi_z_buffer", hi_z_buffer.get());
      tfx::set_extern("enviSpecular", atm_envi_specular_srv.get());
      tfx::set_extern("enviBRDF", atm_envi_brdf_srv.get());
      reflections(encoder, render_size.get());
    };
  });
}

static
EventSystemRegistration mk_fg_node_reflections_registration(
  mk_fg_node_reflections,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_reflections"
);
