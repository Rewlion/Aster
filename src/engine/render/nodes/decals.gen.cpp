// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "decals.ecs.cpp" 

using namespace ecs;

const static DirectQueryRegistration query_decals_queryReg{
  {
    DESCRIBE_QUERY_COMPONENT("decal", const DecalComponent)
  },
  "query_decals"};
const static query_id_t query_decals_queryId = query_decals_queryReg.getId();


void query_decals (eastl::function<
  void(
    const const DecalComponent& decal)> cb)
{
  ecs::get_registry().query(query_decals_queryId, [&](ComponentsAccessor& accessor)
  {
    const const DecalComponent& decal = accessor.get<const DecalComponent>(compile_ecs_name_hash("decal"));
    cb(decal);
  });
}


//Engine::OnFrameGraphInit handler
static
void mk_fg_node_decals(Event*, ComponentsAccessor&)
{
  fg::register_node("decals", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    auto late_opaque_depth = reg.readTexture("late_opaque_depth", gapi::TextureState::DepthReadStencilRead, false);
    reg.requestRenderPass()
      .addTarget("gbuf0", gapi::LoadOp::Load, gapi::StoreOp::Store, gapi::ClearColorValue{uint32_t{0}})
      .addDepth(late_opaque_depth);


    return [late_opaque_depth](gapi::CmdEncoder& encoder)
    {
      decals_exec(late_opaque_depth.get(), encoder);
    };
  });
}

static
EventSystemRegistration mk_fg_node_decals_registration(
  mk_fg_node_decals,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_decals"
);
