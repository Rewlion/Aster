// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "gi_surfels.ecs.cpp" 

using namespace ecs;

const static DirectQueryRegistration query_state_queryReg{
  {
    DESCRIBE_QUERY_COMPONENT("state", GIOnSurfels)
  },
  "query_state"};
const static query_id_t query_state_queryId = query_state_queryReg.getId();


void query_state (eastl::function<
  void(
    GIOnSurfels& state)> cb)
{
  ecs::get_registry().query(query_state_queryId, [&](ComponentsAccessor& accessor)
  {
    GIOnSurfels& state = accessor.get<GIOnSurfels>(compile_ecs_name_hash("state"));
    cb(state);
  });
}


//Engine::OnFrameGraphInit handler
static
void mk_fg_node_gibs_resources(Event*, ComponentsAccessor&)
{
  fg::register_node("gibs_resources", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    const uint2 __renderSize__ = reg.getRenderSize();


    auto gibs_dbg_alloc = reg.createTexture("gibs_dbg_alloc",
      gapi::TextureAllocationDescription{
        .format =          gapi::TextureFormat::R32G32B32A32_S,
        .extent =          uint3(__renderSize__, 1),
        .mipLevels =       1,
        .arrayLayers =     1,
        .samplesPerPixel = gapi::TextureSamples::s1,
        .usage =           (gapi::TextureUsage)(gapi::TextureUsage::TEX_USAGE_SRV | gapi::TextureUsage::TEX_USAGE_UAV)
      },
      gapi::TextureState::ShaderReadWrite,
      false
    );

    auto gibs_surfels_storage = reg.createBuffer(
      "gibs_surfels_storage",
      gapi::BufferAllocationDescription{
        .size = (250 * 1024) * sizeof(SurfelData),
        .usage = gapi::BufferUsage::BF_BindUAV | gapi::BufferUsage::BF_GpuVisible
      },
      gapi::BufferState::BF_STATE_UAV_RW
    );
    auto gibs_surfels_pool = reg.createBuffer(
      "gibs_surfels_pool",
      gapi::BufferAllocationDescription{
        .size = (250 * 1024) * sizeof(uint),
        .usage = gapi::BufferUsage::BF_BindUAV | gapi::BufferUsage::BF_GpuVisible
      },
      gapi::BufferState::BF_STATE_UAV_RW
    );

    return [gibs_dbg_alloc](gapi::CmdEncoder& encoder)
    {
      gibs_resources_init(encoder, gibs_dbg_alloc.get());
    };
  });
}

static
EventSystemRegistration mk_fg_node_gibs_resources_registration(
  mk_fg_node_gibs_resources,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_gibs_resources"
);


//Engine::OnFrameGraphInit handler
static
void mk_fg_node_gibs_allocate_surfels(Event*, ComponentsAccessor&)
{
  fg::register_node("gibs_allocate_surfels", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    const uint2 __renderSize__ = reg.getRenderSize();

    fg::dsl::AccessDecorator render_size{__renderSize__};
    auto dbgTex = reg.modifyTexture("gibs_dbg_alloc", gapi::TextureState::ShaderReadWrite);
    auto gbuffer_normal = reg.readTexture("gbuf1", gapi::TextureState::ShaderRead, false);
    auto gbuffer_depth = reg.readTexture("late_opaque_depth", gapi::TextureState::DepthReadStencilRead, false);
    reg.orderMeBefore("gbuffer_resolve");

    return [dbgTex,gbuffer_normal,gbuffer_depth,render_size](gapi::CmdEncoder& encoder)
    {
      tfx::set_extern("dbgTex", dbgTex.get());
      tfx::set_extern("gbuffer_normal", gbuffer_normal.get());
      tfx::set_extern("gbuffer_depth", gbuffer_depth.get());
      gibs_allocate_surfels(encoder, render_size.get());
    };
  });
}

static
EventSystemRegistration mk_fg_node_gibs_allocate_surfels_registration(
  mk_fg_node_gibs_allocate_surfels,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_gibs_allocate_surfels"
);
