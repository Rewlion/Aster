// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "clustered_render.ecs.cpp" 

using namespace ecs;

static void clustered_render_prepare_internal(Event* event, ComponentsAccessor& accessor)
{
  const Engine::OnBeforeRender* casted_event = reinterpret_cast<const Engine::OnBeforeRender*>(event);
  Engine::Render::ClusteredRenderer& clustered_render = accessor.get<Engine::Render::ClusteredRenderer>(compile_ecs_name_hash("clustered_render"));
  clustered_render_prepare(*casted_event, clustered_render);
}


static EventSystemRegistration clustered_render_prepare_registration(
  clustered_render_prepare_internal,
  compile_ecs_name_hash("OnBeforeRender"),
  {
    DESCRIBE_QUERY_COMPONENT("clustered_render", Engine::Render::ClusteredRenderer)
  },
  "clustered_render_prepare"
);


//Engine::OnFrameGraphInit handler
static
void mk_fg_node_dbg_clustered_render(Event*, ComponentsAccessor&)
{
  fg::register_node("dbg_clustered_render", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    reg.orderMeBefore("ui");
    auto rt = reg.modifyTexture("final_target", gapi::TextureState::RenderTarget);

    return [rt](gapi::CmdEncoder& encoder)
    {
      dbg_clustered_render_exec(encoder, rt.get());
    };
  });
}

static
EventSystemRegistration mk_fg_node_dbg_clustered_render_registration(
  mk_fg_node_dbg_clustered_render,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_dbg_clustered_render"
);
