// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "present.ecs.cpp" 

using namespace ecs;

//Engine::OnFrameGraphInit handler
static
void mk_fg_node_present_producer(Event*, ComponentsAccessor&)
{
  fg::register_node("present_producer", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    auto present_src = reg.renameTexture("final_antialiased_target", "present_src", gapi::TextureState::RenderTarget);
    return [](gapi::CmdEncoder&){};
  });
}

static
EventSystemRegistration mk_fg_node_present_producer_registration(
  mk_fg_node_present_producer,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_present_producer"
);


//Engine::OnFrameGraphInit handler
static
void mk_fg_node_present(Event*, ComponentsAccessor&)
{
  fg::register_node("present", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    auto present_src = reg.readTexture("present_src", gapi::TextureState::TransferSrc, false);
    auto backbuffer = reg.modifyTexture("backbuffer", gapi::TextureState::TransferDst);

    return [present_src,backbuffer](gapi::CmdEncoder& encoder)
    {
      present_exec(encoder, present_src.get(), backbuffer.get());
    };
  });
}

static
EventSystemRegistration mk_fg_node_present_registration(
  mk_fg_node_present,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_present"
);
