// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "shadow_map.ecs.cpp" 

using namespace ecs;

//Engine::OnFrameGraphInit handler
static
void mk_fg_node_shadow_map(Event*, ComponentsAccessor&)
{
  fg::register_node("shadow_map", FG_FILE_DECL, [](fg::Registry& reg)
  { 

    auto shadow_map = reg.createTexture("shadow_map",
      gapi::TextureAllocationDescription{
        .format =          gapi::TextureFormat::D24_UNORM_S8_UINT,
        .extent =          uint3(2048, 2048, 1),
        .mipLevels =       1,
        .arrayLayers =     1,
        .samplesPerPixel = gapi::TextureSamples::s1,
        .usage =           (gapi::TextureUsage)(gapi::TextureUsage::TEX_USAGE_DEPTH_STENCIL | gapi::TextureUsage::TEX_USAGE_SRV)
      },
      gapi::TextureState::DepthWriteStencilWrite,
      false
    );

    reg.requestRenderPass()
      .addRWDepth(shadow_map, gapi::LoadOp::Clear, gapi::StoreOp::Store);

    auto camera_data = reg.readBlob<Engine::CameraData>("camera_data");
    auto sun_azimuth_altitude = reg.readBlob<float2>("sun_azimuth_altitude");
    auto shadow_map_viewProj = reg.createBlob<float4x4>("shadow_map_viewProj");

    return [camera_data,sun_azimuth_altitude,shadow_map_viewProj](gapi::CmdEncoder& encoder)
    {
      shadow_map_exec(encoder, camera_data.get(), sun_azimuth_altitude.get(), shadow_map_viewProj.get());
    };
  });
}

static
EventSystemRegistration mk_fg_node_shadow_map_registration(
  mk_fg_node_shadow_map,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_shadow_map"
);
