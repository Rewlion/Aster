// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "frame_preparing.ecs.cpp" 

using namespace ecs;

//Engine::OnFrameGraphInit handler
static
void mk_fg_node_backbuffer_acquiring(Event*, ComponentsAccessor&)
{
  fg::register_node("backbuffer_acquiring", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    auto backbuffer = reg.importTextureProducer("backbuffer", import_backbuffer);

    return [](gapi::CmdEncoder& encoder)
    {
      backbuffer_acquiring_exec(encoder);
    };
  });
}

static
EventSystemRegistration mk_fg_node_backbuffer_acquiring_registration(
  mk_fg_node_backbuffer_acquiring,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_backbuffer_acquiring"
);


static void mk_frame_samplers_preparing_node_internal(Event* event, ComponentsAccessor& accessor)
{
  const Engine::OnFrameGraphInit* casted_event = reinterpret_cast<const Engine::OnFrameGraphInit*>(event);

  mk_frame_samplers_preparing_node(*casted_event);
}


static EventSystemRegistration mk_frame_samplers_preparing_node_registration(
  mk_frame_samplers_preparing_node_internal,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {

  },
  "mk_frame_samplers_preparing_node"
);


//Engine::OnFrameGraphInit handler
static
void mk_fg_node_frame_preparing(Event*, ComponentsAccessor&)
{
  fg::register_node("frame_preparing", FG_FILE_DECL, [](fg::Registry& reg)
  { 
    reg.orderMeAfter("backbuffer_acquiring");
    auto sph_buf = reg.createBuffer(
      "sph_buf",
      gapi::BufferAllocationDescription{
        .size = (9 + 1) * sizeof(float4),
        .usage = gapi::BufferUsage::BF_BindUAV | gapi::BufferUsage::BF_GpuVisible
      },
      gapi::BufferState::BF_STATE_UAV_RW
    );
    auto camera_data = reg.createBlob<Engine::CameraData>("camera_data");
    auto window_size = reg.createBlob<int2>("window_size");

    return [sph_buf,window_size,camera_data](gapi::CmdEncoder& encoder)
    {
      frame_preparing_exec(encoder, sph_buf.get(), camera_data.get(), window_size.get());
    };
  });
}

static
EventSystemRegistration mk_fg_node_frame_preparing_registration(
  mk_fg_node_frame_preparing,
  compile_ecs_name_hash("OnFrameGraphInit"),
  {
  },
  "mk_fg_node_frame_preparing"
);
