// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "clustered_render.ecs.cpp" 

using namespace ecs;

const static DirectQueryRegistration query_clustered_render_queryReg{
  {
    DESCRIBE_QUERY_COMPONENT("clustered_render", Engine::Render::ClusteredRenderer)
  },
  "query_clustered_render"};
const static query_id_t query_clustered_render_queryId = query_clustered_render_queryReg.getId();


void query_clustered_render (eastl::function<
  void(
    Engine::Render::ClusteredRenderer& clustered_render)> cb)
{
  ecs::get_registry().query(query_clustered_render_queryId, [&](ComponentsAccessor& accessor)
  {
    Engine::Render::ClusteredRenderer& clustered_render = accessor.get<Engine::Render::ClusteredRenderer>(compile_ecs_name_hash("clustered_render"));
    cb(clustered_render);
  });
}


static void point_light_dbg_draw_internal(Event* event, ComponentsAccessor& accessor)
{
  Engine::OnGameTick* casted_event = reinterpret_cast<Engine::OnGameTick*>(event);
  const float3& pos = accessor.get<float3>(compile_ecs_name_hash("pos"));
  const float3& point_light_color = accessor.get<float3>(compile_ecs_name_hash("point_light_color"));
  float point_light_attenuation_radius = accessor.get<float>(compile_ecs_name_hash("point_light_attenuation_radius"));
  point_light_dbg_draw(*casted_event, pos,point_light_color,point_light_attenuation_radius);
}


static EventSystemRegistration point_light_dbg_draw_registration(
  point_light_dbg_draw_internal,
  compile_ecs_name_hash("OnGameTick"),
  {
    DESCRIBE_QUERY_COMPONENT("pos", float3),
    DESCRIBE_QUERY_COMPONENT("point_light_color", float3),
    DESCRIBE_QUERY_COMPONENT("point_light_attenuation_radius", float)
  },
  "point_light_dbg_draw"
);


static void listen_point_lights_creation_internal(Event* event, ComponentsAccessor& accessor)
{
  ecs::OnEntityCreated* casted_event = reinterpret_cast<ecs::OnEntityCreated*>(event);
  const float3& pos = accessor.get<float3>(compile_ecs_name_hash("pos"));
  const float3& point_light_color = accessor.get<float3>(compile_ecs_name_hash("point_light_color"));
  float point_light_attenuation_radius = accessor.get<float>(compile_ecs_name_hash("point_light_attenuation_radius"));
  listen_point_lights_creation(*casted_event, pos,point_light_color,point_light_attenuation_radius);
}


static EventSystemRegistration listen_point_lights_creation_registration(
  listen_point_lights_creation_internal,
  compile_ecs_name_hash("OnEntityCreated"),
  {
    DESCRIBE_QUERY_COMPONENT("pos", float3),
    DESCRIBE_QUERY_COMPONENT("point_light_color", float3),
    DESCRIBE_QUERY_COMPONENT("point_light_attenuation_radius", float)
  },
  "listen_point_lights_creation"
);
