// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "virtual_terrain.ecs.cpp" 

using namespace ecs;

const static DirectQueryRegistration query_vterrain_queryReg{
  {
    DESCRIBE_QUERY_COMPONENT("vterrain_render", Engine::Render::TerrainRender)
  },
  "query_vterrain"};
const static query_id_t query_vterrain_queryId = query_vterrain_queryReg.getId();


void query_vterrain (eastl::function<
  void(
    Engine::Render::TerrainRender& vterrain_render)> cb)
{
  ecs::get_registry().query(query_vterrain_queryId, [&](ComponentsAccessor& accessor)
  {
    Engine::Render::TerrainRender& vterrain_render = accessor.get<Engine::Render::TerrainRender>(compile_ecs_name_hash("vterrain_render"));
    cb(vterrain_render);
  });
}


static void virtual_terrain_creation_handler_internal(Event* event, ComponentsAccessor& accessor)
{
  OnEntityCreated* casted_event = reinterpret_cast<OnEntityCreated*>(event);
  const string& vterrain_name = accessor.get<string>(compile_ecs_name_hash("vterrain_name"));
  const float2& vterrain_heightmapMinMaxBorder = accessor.get<float2>(compile_ecs_name_hash("vterrain_heightmapMinMaxBorder"));
  float vterrain_heightmapMaxHeight = accessor.get<float>(compile_ecs_name_hash("vterrain_heightmapMaxHeight"));
  int vterrain_patchSideBits = accessor.get<int>(compile_ecs_name_hash("vterrain_patchSideBits"));
  int vterrain_worldSize_meters = accessor.get<int>(compile_ecs_name_hash("vterrain_worldSize_meters"));
  const string& vterrain_detail = accessor.get<string>(compile_ecs_name_hash("vterrain_detail"));
  virtual_terrain_creation_handler(*casted_event, vterrain_name,vterrain_heightmapMinMaxBorder,vterrain_heightmapMaxHeight,vterrain_patchSideBits,vterrain_worldSize_meters,vterrain_detail);
}


static EventSystemRegistration virtual_terrain_creation_handler_registration(
  virtual_terrain_creation_handler_internal,
  compile_ecs_name_hash("OnEntityCreated"),
  {
    DESCRIBE_QUERY_COMPONENT("vterrain_name", string),
    DESCRIBE_QUERY_COMPONENT("vterrain_heightmapMinMaxBorder", float2),
    DESCRIBE_QUERY_COMPONENT("vterrain_heightmapMaxHeight", float),
    DESCRIBE_QUERY_COMPONENT("vterrain_patchSideBits", int),
    DESCRIBE_QUERY_COMPONENT("vterrain_worldSize_meters", int),
    DESCRIBE_QUERY_COMPONENT("vterrain_detail", string)
  },
  "virtual_terrain_creation_handler"
);


static void virtual_terrain_on_tick_internal(Event* event, ComponentsAccessor& accessor)
{
  OnGameTick* casted_event = reinterpret_cast<OnGameTick*>(event);
  Engine::Render::TerrainRender& vterrain_render = accessor.get<Engine::Render::TerrainRender>(compile_ecs_name_hash("vterrain_render"));
  virtual_terrain_on_tick(*casted_event, vterrain_render);
}


static EventSystemRegistration virtual_terrain_on_tick_registration(
  virtual_terrain_on_tick_internal,
  compile_ecs_name_hash("OnGameTick"),
  {
    DESCRIBE_QUERY_COMPONENT("vterrain_render", Engine::Render::TerrainRender)
  },
  "virtual_terrain_on_tick"
);
