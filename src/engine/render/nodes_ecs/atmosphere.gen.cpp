// this file is generated by ecs codegen
// do not edit
#include <engine/ecs/ecs.h>
#include <engine/ecs/components_accessor.h>
#include <EASTL/functional.h>

#include "atmosphere.ecs.cpp" 

using namespace ecs;

const static DirectQueryRegistration query_atm_tr_lut_queryReg{
  {
    DESCRIBE_QUERY_COMPONENT("atm_tr_lut", gapi::TextureWrapper)
  },
  "query_atm_tr_lut"};
const static query_id_t query_atm_tr_lut_queryId = query_atm_tr_lut_queryReg.getId();


void query_atm_tr_lut (eastl::function<
  void(
    const gapi::TextureWrapper& atm_tr_lut)> cb)
{
  ecs::get_registry().query(query_atm_tr_lut_queryId, [&](ComponentsAccessor& accessor)
  {
    const gapi::TextureWrapper& atm_tr_lut = accessor.get<gapi::TextureWrapper>(compile_ecs_name_hash("atm_tr_lut"));
    cb(atm_tr_lut);
  });
}


const static DirectQueryRegistration query_atm_params_queryReg{
  {
    DESCRIBE_QUERY_COMPONENT("atm_radius_bot_km", float),
    DESCRIBE_QUERY_COMPONENT("atm_radius_top_km", float)
  },
  "query_atm_params"};
const static query_id_t query_atm_params_queryId = query_atm_params_queryReg.getId();


void query_atm_params (eastl::function<
  void(
    float atm_radius_bot_km,
    float atm_radius_top_km)> cb)
{
  ecs::get_registry().query(query_atm_params_queryId, [&](ComponentsAccessor& accessor)
  {
    float atm_radius_bot_km = accessor.get<float>(compile_ecs_name_hash("atm_radius_bot_km"));
    float atm_radius_top_km = accessor.get<float>(compile_ecs_name_hash("atm_radius_top_km"));
    cb(atm_radius_bot_km,atm_radius_top_km);
  });
}


const static DirectQueryRegistration query_sun_params_queryReg{
  {
    DESCRIBE_QUERY_COMPONENT("sun_azimuth", float),
    DESCRIBE_QUERY_COMPONENT("sun_altitude", float)
  },
  "query_sun_params"};
const static query_id_t query_sun_params_queryId = query_sun_params_queryReg.getId();


void query_sun_params (eastl::function<
  void(
    float sun_azimuth,
    float sun_altitude)> cb)
{
  ecs::get_registry().query(query_sun_params_queryId, [&](ComponentsAccessor& accessor)
  {
    float sun_azimuth = accessor.get<float>(compile_ecs_name_hash("sun_azimuth"));
    float sun_altitude = accessor.get<float>(compile_ecs_name_hash("sun_altitude"));
    cb(sun_azimuth,sun_altitude);
  });
}


const static DirectQueryRegistration query_atm_lut_state_queryReg{
  {
    DESCRIBE_QUERY_COMPONENT("atm_lut_state", int)
  },
  "query_atm_lut_state"};
const static query_id_t query_atm_lut_state_queryId = query_atm_lut_state_queryReg.getId();


void query_atm_lut_state (eastl::function<
  void(
    int& atm_lut_state)> cb)
{
  ecs::get_registry().query(query_atm_lut_state_queryId, [&](ComponentsAccessor& accessor)
  {
    int& atm_lut_state = accessor.get<int>(compile_ecs_name_hash("atm_lut_state"));
    cb(atm_lut_state);
  });
}


static void atmosphere_creation_handler_internal(Event* event, ComponentsAccessor& accessor)
{
  OnEntityCreated* casted_event = reinterpret_cast<OnEntityCreated*>(event);
  float atm_radius_bot_km = accessor.get<float>(compile_ecs_name_hash("atm_radius_bot_km"));
  float atm_radius_top_km = accessor.get<float>(compile_ecs_name_hash("atm_radius_top_km"));
  atmosphere_creation_handler(*casted_event, atm_radius_bot_km,atm_radius_top_km);
}


static EventSystemRegistration atmosphere_creation_handler_registration(
  atmosphere_creation_handler_internal,
  compile_ecs_name_hash("OnEntityCreated"),
  {
    DESCRIBE_QUERY_COMPONENT("atm_radius_bot_km", float),
    DESCRIBE_QUERY_COMPONENT("atm_radius_top_km", float)
  },
  "atmosphere_creation_handler"
);


static void atmosphere_render_creation_handler_internal(Event* event, ComponentsAccessor& accessor)
{
  OnEntityCreated* casted_event = reinterpret_cast<OnEntityCreated*>(event);
  const gapi::TextureWrapper& atm_tr_lut = accessor.get<gapi::TextureWrapper>(compile_ecs_name_hash("atm_tr_lut"));
  const gapi::TextureWrapper& atm_sky_lut = accessor.get<gapi::TextureWrapper>(compile_ecs_name_hash("atm_sky_lut"));
  const gapi::TextureWrapper& atm_ms_lut = accessor.get<gapi::TextureWrapper>(compile_ecs_name_hash("atm_ms_lut"));
  atmosphere_render_creation_handler(*casted_event, atm_tr_lut,atm_sky_lut,atm_ms_lut);
}


static EventSystemRegistration atmosphere_render_creation_handler_registration(
  atmosphere_render_creation_handler_internal,
  compile_ecs_name_hash("OnEntityCreated"),
  {
    DESCRIBE_QUERY_COMPONENT("atm_tr_lut", gapi::TextureWrapper),
    DESCRIBE_QUERY_COMPONENT("atm_sky_lut", gapi::TextureWrapper),
    DESCRIBE_QUERY_COMPONENT("atm_ms_lut", gapi::TextureWrapper)
  },
  "atmosphere_render_creation_handler"
);


const static DirectQueryRegistration query_sun_queryReg{
  {
    DESCRIBE_QUERY_COMPONENT("sun_azimuth", float),
    DESCRIBE_QUERY_COMPONENT("sun_altitude", float)
  },
  "query_sun"};
const static query_id_t query_sun_queryId = query_sun_queryReg.getId();


void query_sun (eastl::function<
  void(
    float& sun_azimuth,
    float& sun_altitude)> cb)
{
  ecs::get_registry().query(query_sun_queryId, [&](ComponentsAccessor& accessor)
  {
    float& sun_azimuth = accessor.get<float>(compile_ecs_name_hash("sun_azimuth"));
    float& sun_altitude = accessor.get<float>(compile_ecs_name_hash("sun_altitude"));
    cb(sun_azimuth,sun_altitude);
  });
}
